<?php

nginx 和 php超时设置
nginx.conf ---  http节:

keepalive_timeout 600; #客户端浏览器超时时间
fastcgi_connect_timeout 600; #php-fpm连接超时时间（等待php执行的最长时间，超过这个会向浏览器返回504或502）
fastcgi_send_timeout 600; #
fastcgi_read_timeout 600;

php-fpm.conf ：

pm.max_children = 40 #最大子进程数量
request_terminate_timeout = 600 #php-fpm进程执行超时时间

php.ini ：
max_execution_time = 300 #php执行超时时间
max_input_time = 300 #获取post上传数据最长时间
memory_limit = 128M #内存限制
default_socket_time

windows:
nginx虚拟主机
server {
        listen       3030;
        server_name  127.0.0.1 ;
        root   "D:\phpStudy\PHPTutorial\WWW\\new_project\public";
        location / {
            #设置允许静态资源跨域
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' '*';
            add_header 'Access-Control-Allow-Headers' '*';
            index  index.html index.htm index.php;
            #autoindex  on;
 	      if (!-e $request_filename) {
      		 rewrite ^(.*)$ /index.php/$1 last;
       		 break;
    	   }
        }
        location ~ \.php(.*)$ {
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_split_path_info  ^((?U).+\.php)(/?.+)$;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            fastcgi_param  PATH_INFO  $fastcgi_path_info;
            fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;
            include        fastcgi_params;
        }
}


windows下,nginx虚拟主机端口被占用导致nginx服务无法启动的解决方法
1.netstat -aon|findstr "端口号"
2.tasklist|findstr "PID(进程号)"
3.任务管理器-进程-查看-pid->结束相关进程

静态资源上传服务器
server {
        listen     1122;
        server_name  127.0.0.1;
        index index.html index.htm index.php;    
        root "E:/uploads";     
        location / {              
            autoindex on;                         
            autoindex_exact_size off;           
            autoindex_localtime on;            
       }

        location ~ [^/]\.php(/|$) {
    fastcgi_pass 127.0.0.1:9000;
        #fastcgi_pass unix:/dev/shm/php-cgi.sock;
        fastcgi_index index.php;
        include fastcgi.conf;
       }
}



脚本服务器
server {
  listen 6543;
  server_name 127.0.0.1;
  index index.html index.htm index.php;
  root "E:/storefiles"; 

  location ~ [^/]\.php(/|$) {
    fastcgi_pass 127.0.0.1:9000;
    #fastcgi_pass unix:/dev/shm/php-cgi.sock;
    fastcgi_index index.php;
    include fastcgi.conf;
  }

  
  location ~ /\.ht {
    deny all;
  }
}



Linux-静态资源跨域
1.前端站点和后端站点屏蔽以下#号注释类容

server {
  listen 3336;
  server_name 127.0.0.1;
  access_log /data/wwwlogs/www.index.com_nginx.log combined;
  index index.html index.htm index.php;
  root /data/wwwroot/xietong_index;

  include /usr/local/nginx/conf/rewrite/wordpress.conf;
  #error_page 404 /404.html;
  #error_page 502 /502.html;

  location ~ [^/]\.php(/|$) {
    #fastcgi_pass remote_php_ip:9000;
    fastcgi_pass unix:/dev/shm/php-cgi.sock;
    fastcgi_index index.php;
    include fastcgi.conf;
  }

  #location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ {
  #  expires 30d;
  #  access_log off;
  #}
  #location ~ .*\.(js|css)?$ {
  #  expires 7d;
  #  access_log off;
  #}
  #location ~ /\.ht {
  #  deny all;
  #}
}

2.伪静态中添加以下类容（将跨域部分的设置放到伪静态当中，共用一个location段）
location / {
  add_header 'Access-Control-Allow-Origin' '*';
  add_header 'Access-Control-Allow-Methods' '*';
  add_header 'Access-Control-Allow-Headers' '*';
  try_files $uri $uri/ /index.php?$args;
}

3.nginx配置负载均衡时,静态资源访问不到的处理示例：
upstream web{
        server 192.168.255.131:8080 weight=1; 
        server 192.168.255.132:8080 weight=1; 
}

upstream mobile{
        server 192.168.255.131:9090 weight=1; 
        server 192.168.255.132:9090 weight=1; 
}

PC分发:
server {
    listen 80;
    server_name 127.0.0.1;
   # add_header 'Access-Control-Allow-Origin' '*';
    location / {
      proxy_pass http://web;
    }

    location ~ .* {
        proxy_buffer_size 64k;
        proxy_buffers 32 32k;
        proxy_busy_buffers_size 128k;

        //静态资源访问不到的处理
        proxy_pass http://web;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}

移动分发
server {
    listen 8080;
    server_name 127.0.0.1;

    location / {
      proxy_pass http://mobile;
    }

    location ~ .* {
        proxy_buffer_size 64k;
        proxy_buffers 32 32k;
        proxy_busy_buffers_size 128k;

        //静态资源访问不到的处理
        proxy_pass http://mobile;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}




获取请求头信息（nginx），该函数不能用作公共函数，否则会报错
function getallheaders() {
    $headers = [];
    foreach ($_SERVER as $name => $value) {
        if (substr($name, 0, 5) == 'HTTP_') {
            $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;
        }
    }
    return $headers;
}

 

一、NGINX伪静态简介

shell中，我们使用$1、$2、$3之类的，代表传递的参数，那么在Nginx中,$1、$2、$3代表什么呢？如下：

if (!-e $request_filename) {
        rewrite ^/(.*) /index.php?$1 last;
}
其实，$1、$2、$3，$n，代表nginx正则匹配的第一个、第二个、第三个参数，第 n个参数。
在上诉案例中，$1代表的是(.*)匹配的内容。



----------
详解 nginx location ~ .*\.(js|css)?$ 什么意思？
语法规则： location [=|~|~*|^~] /uri/ { … }
= 开头表示精确匹配

^~ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。nginx不对url做编码，
    因此请求为/static/20%/aa，可以被规则^~ /static/ /aa匹配到（注意是空格）。

~ 开头表示区分大小写的正则匹配

~*  开头表示不区分大小写的正则匹配

!~和!~*分别为区分大小写不匹配及不区分大小写不匹配 的正则

/ 通用匹配，任何请求都会匹配到。

多个location配置的情况下匹配顺序为（参考资料而来，还未实际验证，试试就知道了，不必拘泥，仅供参考）：

首先匹配 =，其次匹配^~, 其次是按文件中顺序的正则匹配，最后是交给 / 通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。

例子，有如下匹配规则：

location = / {精确匹配，必须是127.0.0.1/
  #规则A
}

location = /login {精确匹配，必须是127.0.0.1/login
  #规则B
}

location ^~ /static/ {非精确匹配，并且不区分大小写，比如127.0.0.1/static/js.
  #规则C
}

location ~ \.(gif|jpg|png|js|css)$ {区分大小写，以gif,jpg,js结尾
  #规则D
}

location ~* \.png$ {不区分大小写，匹配.png结尾的
  #规则E
}

location !~ \.xhtml$ {区分大小写，匹配不已.xhtml结尾的
  #规则F
}

location !~* \.xhtml$ {不区分大小写，匹配不已.xhtml结尾的
  #规则G
}

location / {什么都可以
  #规则H
}


----------
nginx rewrite 伪静态配置参数和使用例子 附正则使用说明
正则表达式匹配，其中：
~ 为区分大小写匹配
~* 为不区分大小写匹配
!~和!~*分别为区分大小写不匹配及不区分大小写不匹配

文件及目录匹配，其中：
-f和!-f用来判断是否存在文件
-d和!-d用来判断是否存在目录
-e和!-e用来判断是否存在文件或目录
-x和!-x用来判断文件是否可执行

flag标记有：
last 相当于Apache里的[L]标记，表示完成rewrite
break 终止匹配, 不再匹配后面的规则
redirect 返回302临时重定向 地址栏会显示跳转后的地址
permanent 返回301永久重定向 地址栏会显示跳转后的地址
 
一些可用的全局变量有:可以用做条件判断(待补全)
$args
$content_length
$content_type
$document_root
$document_uri
$host
$http_user_agent
$http_cookie
$limit_rate
$request_body_file
$request_method
$remote_addr
$remote_port
$remote_user
$request_filename
$request_uri
$query_string
$scheme
$server_protocol
$server_addr
$server_name
$server_port
$uri

结合QeePHP的例子

if (!-d $request_filename) {
 rewrite ^/([a-z-A-Z]+)/([a-z-A-Z]+)/?(.*)$ /index.php?namespace=user&controller=$1&action=$2&$3 last;
 rewrite ^/([a-z-A-Z]+)/?$ /index.php?namespace=user&controller=$1 last;
 break;
}
 多目录转成参数
 abc.domian.com/sort/2 => abc.domian.com/index.php?act=sort&name=abc&id=2

if ($host ~* (.*)\.domain\.com) {
 set $sub_name $1;
 rewrite ^/sort\/(\d+)\/?$ /index.php?act=sort&cid=$sub_name&id=$1 last;
 }
 目录对换
 /123456/xxxx -> /xxxx?id=123456

rewrite ^/(\d+)/(.+)/ /$2?id=$1 last;
 例如下面设定nginx在用户使用ie的使用重定向到/nginx-ie目录下：

if ($http_user_agent ~ MSIE) {
 rewrite ^(.*)$ /nginx-ie/$1 break;
 }
 目录自动加“/”

if (-d $request_filename){
 rewrite ^/(.*)([^/])$ http://$host/$1$2/ permanent;
 }
 禁止htaccess

location ~/\.ht {
 deny all;
 }
 禁止多个目录

location ~ ^/(cron|templates)/ {
 deny all;
 break;
 }
 禁止以/data开头的文件
 可以禁止/data/下多级目录下.log.txt等请求;

location ~ ^/data {
 deny all;
 }
 禁止单个目录
 不能禁止.log.txt能请求

location /searchword/cron/ {
 deny all;
 }
 禁止单个文件

location ~ /data/sql/data.sql {
 deny all;
 }
 给favicon.ico和robots.txt设置过期时间;
 这里为favicon.ico为99 天,robots.txt为7天并不记录404错误日志

location ~(favicon.ico) {
 log_not_found off;
 expires 99d;
 break;
 }

location ~(robots.txt) {
 log_not_found off;
 expires 7d;
 break;
 }
 设定某个文件的过期时间;这里为600秒，并不记录访问日志

location ^~ /html/scripts/loadhead_1.js {
 access_log off;
 root /opt/lampp/htdocs/web;
 expires 600;
 break;
 }
 文件反盗链并设置过期时间
 这里的return 412 为自定义的http状态码，默认为403，方便找出正确的盗链的请求
 “rewrite ^/ http://mengniu.in/leech.gif;”显示一张防盗链图片
 “access_log off;”不记录访问日志，减轻压力
 “expires 3d”所有文件3天的浏览器缓存

location ~* ^.+\.(jpg|jpeg|gif|png|swf|rar|zip|css|js)$ {
 valid_referers none blocked *.c1gstudio.com *.c1gstudio.net localhost 208.97.167.194;
 if ($invalid_referer) {
 rewrite ^/ http://mengniu.in/leech.gif;
 return 412;
 break;
 }
 access_log off;
 root /opt/lampp/htdocs/web;
 expires 3d;
 break;
 }
 只充许固定ip访问网站，并加上密码

root /opt/htdocs/www;
 allow 208.97.167.194;
 allow 222.33.1.2;
 allow 231.152.49.4;
 deny all;
 auth_basic "C1G_ADMIN";
 auth_basic_user_file htpasswd;
 将多级目录下的文件转成一个文件，增强seo效果
 /job-123-456-789.html 指向/job/123/456/789.html

rewrite ^/job-([0-9]+)-([0-9]+)-([0-9]+)\.html$ /job/$1/$2/jobshow_$3.html last;
 将根目录下某个文件夹指向2级目录
 如/shanghaijob/ 指向 /area/shanghai/
 如果你将last改成permanent，那么浏览器地址栏显是 /location/shanghai/

rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last;
 上面例子有个问题是访问/shanghai 时将不会匹配

rewrite ^/([0-9a-z]+)job$ /area/$1/ last;
 rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last;
 这样/shanghai 也可以访问了，但页面中的相对链接无法使用，
 如./list_1.html真实地址是/area /shanghia/list_1.html会变成/list_1.html,导至无法访问。

那我加上自动跳转也是不行咯
 (-d $request_filename)它有个条件是必需为真实目录，而我的rewrite不是的，所以没有效果

if (-d $request_filename){
 rewrite ^/(.*)([^/])$ http://$host/$1$2/ permanent;
 }
 知道原因后就好办了，让我手动跳转吧

rewrite ^/([0-9a-z]+)job$ /$1job/ permanent;
 rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last;
 文件和目录不存在的时候重定向：

if (!-e $request_filename) {
 proxy_pass http://127.0.0.1;
 }
 域名跳转

server
 {
 listen 80;
 server_name jump.c1gstudio.com;
 index index.html index.htm index.php;
 root /opt/lampp/htdocs/www;
 rewrite ^/ http://www.mengniu.in.com/;
 access_log off;
 }
 多域名转向

server_name www.mengniu.in.com www.mengniu.in;
 index index.html index.htm index.php;
 root /opt/lampp/htdocs;
 if ($host ~ "c1gstudio\.net") {
 rewrite ^(.*) http://www.mengniu.in$1 permanent;
 }
 三级域名跳转

if ($http_host ~* "^(.*)\.i\.c1gstudio\.com$") {
 rewrite ^(.*) http://top.mengniu.in$1;
 break;
 }
 域名镜向

server
 {
 listen 80;
 server_name mirror.c1gstudio.com;
 index index.html index.htm index.php;
 root /opt/lampp/htdocs/www;
 rewrite ^/(.*) http://www.mengniu.in/$1 last;
 access_log off;
 }
 某个子目录作镜向

location ^~ /zhaopinhui {
 rewrite ^.+ http://zph.mengniu.in/ last;
 break;
 }
 discuz ucenter home (uchome) rewrite

rewrite ^/(space|network)-(.+)\.html$ /$1.php?rewrite=$2 last;
 rewrite ^/(space|network)\.html$ /$1.php last;
 rewrite ^/([0-9]+)$ /space.php?uid=$1 last;
 discuz 7 rewrite

rewrite ^(.*)/archiver/((fid|tid)-[\w\-]+\.html)$ $1/archiver/index.php?$2 last;
 rewrite ^(.*)/forum-([0-9]+)-([0-9]+)\.html$ $1/forumdisplay.php?fid=$2&page=$3 last;
 rewrite ^(.*)/thread-([0-9]+)-([0-9]+)-([0-9]+)\.html$ $1/viewthread.php?tid=$2&extra=page\%3D$4&page=$3 last;
 rewrite ^(.*)/profile-(username|uid)-(.+)\.html$ $1/viewpro.php?$2=$3 last;
 rewrite ^(.*)/space-(username|uid)-(.+)\.html$ $1/space.php?$2=$3 last;
 rewrite ^(.*)/tag-(.+)\.html$ $1/tag.php?name=$2 last;
 给discuz某版块单独配置域名

server_name bbs.c1gstudio.com news.c1gstudio.com;

location = / {
 if ($http_host ~ news\.c1gstudio.com$) {
 rewrite ^.+ http://news.mengniu.in/forum-831-1.html last;
 break;
 }
 }
 discuz ucenter 头像 rewrite 优化

location ^~ /ucenter {
 location ~ .*\.php?$
 {
 #fastcgi_pass unix:/tmp/php-cgi.sock;
 fastcgi_pass 127.0.0.1:9000;
 fastcgi_index index.php;
 include fcgi.conf;
 }

location /ucenter/data/avatar {
 log_not_found off;
 access_log off;
 location ~ /(.*)_big\.jpg$ {
 error_page 404 /ucenter/images/noavatar_big.gif;
 }
 location ~ /(.*)_middle\.jpg$ {
 error_page 404 /ucenter/images/noavatar_middle.gif;
 }
 location ~ /(.*)_small\.jpg$ {
 error_page 404 /ucenter/images/noavatar_small.gif;
 }
 expires 300;
 break;
 }
 }
 jspace rewrite

location ~ .*\.php?$
 {
 #fastcgi_pass unix:/tmp/php-cgi.sock;
 fastcgi_pass 127.0.0.1:9000;
 fastcgi_index index.php;
 include fcgi.conf;
 }

location ~* ^/index.php/
 {
 rewrite ^/index.php/(.*) /index.php?$1 break;
 fastcgi_pass 127.0.0.1:9000;
 fastcgi_index index.php;
 include fcgi.conf;
 }



 nginx的upstream(负载均衡)目前支持的5种方式的分配


1、轮询（默认）
每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。 
upstream backserver { 
  server 192.168.0.14; 
  server 192.168.0.15; 
} 

2、指定权重
指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 
upstream backserver { 
  server 192.168.0.14 weight=8; 
  server 192.168.0.15 weight=10; 
} 

3、IP绑定 ip_hash
每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。 
upstream backserver { 
ip_hash; 
  server 192.168.0.14:88; 
  server 192.168.0.15:80; 
} 

4、fair（第三方）
按后端服务器的响应时间来分配请求，响应时间短的优先分配。 
upstream backserver { 
  server server1; 
  server server2; 
  fair; 
} 

5、url_hash（第三方）
按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 
  upstream backserver { 
  server squid1:3128; 
  server squid2:3128; 
  hash $request_uri; 
  hash_method crc32; 
} 