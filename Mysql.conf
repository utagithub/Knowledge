<?php
mysql五子句执行顺序：https://www.cnblogs.com/warehouse/p/9410599.html
SELECT语句的处理过程
1. FROM阶段
2. WHERE阶段
3. GROUP BY阶段
4. HAVING阶段
5. SELECT阶段
6. ORDER BY阶段
7. LIMIT阶段

navicate执行(选中sql)查询快捷键ctrl+shif+r
mysql是有关键字的，如果不慎将关键字用做了字段名，那就会出现意想不到问题。
例如：order，是mysql的关键字，是不能写在where前面的，如果用了就需要将order用1旁边的那个引号引住，而jpa在进行存储这个字段的时候会报异常，如果报异常了，建议用原生的sql进行更新操作

2018-11-20
MySQL表名不区分大小写的设置方法:
在用centos安装mysql后，把项目的数据库移植了过去，发现一些表的数据查不到，排查了一下问题，最后发现是表名的大小写不一致造成的。
mysql在windows系统下安装好后，默认是对表名大小写不敏感的，但是在linux下，一些系统设置需要手动设置。
用root登录，打开并修改 /etc/my.cnf；在[mysqld]节点下，加入一行： lower_case_table_names=1。
重启mysql服务
service mysqld restart
或/etc/inint.d/mysqld start

2018-11-21
mysql数据库备份:
方式一:备份指定数据库(包含数据库创建语句,表结构,数据)
mysqldump -uroot -p --databases 数据库名 > /home/xiaogang/xxx.sql  
方式一:备份指定数据库(不包含数据库创建语句,包含表结构,数据)
mysqldump -uroot -p  数据库名 > /home/xiaogang/xxx.sql  

方式二:备份所有数据库(包含数据库创建语句,表结构,数据)
mysqldump -uroot -p --all-databases  > /home/xiaogang/xxx.sql  

还原：
mysql -uroot -p密码 数据库名字   <  /home/xiaogang/xxx.sql  

注意事项:
1.有时候通过navicat备份的数据库在其他主机上无法还原,可以尝试通过以上方式备份还原.
2.在命令行中执行mysqld -install 出现Install/Remove of the Service Denied!->要以管理员身份进入命令行

add-drop-table ：在每个创建数据表语句前添加删除数据库的语句  
add-locks：备份数据库表时锁定数据库表  
all-databases：备份mysql服务器上的所有数据库  
comments：添加注释信息  
compact：压缩模式，产生更少的输出  
complete-insert：输出完成的插入语句  
databases：指定要备份的数据库  
default-character-set：指定默认字符集  
force：当出现错误时仍然继续备份操作  
host：指定要备份数据库的服务器  
lock-tables：备份前，锁定所有数据库表  
no-create-db：禁止生成创建数据库语句  
no-create-info：禁止生成创建数据库语句  
pasword：连接mysql服务器的密码  
port：mysql服务器的端口号  
user：连接mysql服务器的用户名 

--------------------------------------------------------------------------------------------------------------------------------
3.修改密码
grep "root@localhost" /var/log/mysqld.log
上述指令意思:在/var/log/mysqld.log安装日志文件中查看root账号的初始密码
初始密码修改前不允许操作mysql，
登录到mysql操作终端后执行如下指令，修改root密码：
mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';
执行完上述指令，密码即设置成功，无需flush刷新

为了后期使用mysql过程中不会产生乱码问题，首先需要给mysql设置字符集

通过vi编辑器打开mysql的配置文件，并做设置
[root@localhost ~] vi /etc/my.cnf
在配置文件最后添加以下内容：
连接mysql时的字符集设置为utf8mb4
init-connect='SET NAMES utf8mb4'
默认存储引擎为INNODB
default-storage-engine=INNODB
服务器端字符集设置为utf8mb4
character-set-server=utf8mb4
[mysql]
mysql本身字符集设置为utf8mb4
default-character-set = utf8mb4
[client]
客户端操作mysql时字符集设置为utf8mb4
default-character-set = utf8mb4


--------------------------------------------------------------------------------------------------------------------------------
数据库优化：
mysql数据表索引类型使用的是btree+数据结构
数据在磁盘中存储,磁盘的最小存储单位是磁盘块,一次查询可能需要取出多个磁盘块的数据

btree数据结构:子节点指针 + 主键 + 记录值
btree+数据结构(非叶子节点):子节点指针 + 主键
根据上面两种数据结构来看对同一个磁盘块来说,相同的条件下,btree+存储的主键个数会比btree多，相对而言可以减少磁盘I/O次数,提高查询效率。


4.蠕虫复制
给本身的数据表信息进行复制操作：
insert into 表名 select null,name,height,introduce from 表名;


5.INNODB和myisam的区别

Myisam:存入数据无序，读取速度块；---表锁 
INNODB:存入数据需要按照主键大小放到指定位置；---读取速度慢-行锁


MyISAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址（表结构文件,索引文件,数据文件）,
而InnoDB是聚集索引，就是索引文件节点中就包含了完整的数据记录（表结构文件,索引-数据文件）。


6.索引原则
设置索引
	alter table table_name add primary key (id);---主键索引
	alter table table_name add unique  key  (name);---唯一索引
	alter table table_name add         key (height);---普通索引
	alter table table_name add fulltext key (introduce);---全文索引（只支持英文，mysql5.6.4以后Innodb和myisam都支持）

删除索引
	alter table  表名  drop  key  索引名称;  [非主键]索引删除(唯一/普通/全文/复合)
	alter table  表名  drop  primary key;   [主键]索引删除

	注意：删除主键索引，必须先去除auto_inrement属性
	去除主键的auto_inrement属性：
	alter table 表名 modify  id int  unsigned  not null comment ‘主键’;

索引适用场合
注意：有的字段重复内容很多(例如性别字段)，则不要设置索引，不会起作用。
  ---理论上where后边的条件字段都应该有索引
  ---排序字段适合做索引
  ---查询的字段既是结果字段、也是复合索引字段，该查询速度就是最快的，针对此情形，查询字段的索引也称为是“黄金索引”

索引使用原则
---字段独立原则
	select * from emp  where empno=1345629; //字段独立，可以使用索引
	select * from emp  where empno+2=1345629;  //字段不独立(不能使用索引)
---左原则
	模糊查询
	关键字：like  %   _
	%: 代表“一个或多个”模糊内容
	_: 代表“一个”模糊内容

	select * from emp where ename like ‘%xiaoming%’;

	模糊查询是否可以使用索引分为具体情形
	左边内容固定则可以使用索引，否则不可以
	like ‘bill%’;  //ok
	like  ‘%bill’; //no
	like  ‘bill_’;  //ok
	like  ‘_bill’; //no
---复合索引
	a.单独使用第一个字段作为条件，可以使用
	b.单独使用第二个字段作为条件，不能使用
	c.使用全部字段(不用考虑顺序)作为条件，可以使用

---or原则
	a. 左右都有索引，会合并索引一起使用
	b. 一边有索引、一边没有索引，导致整体都没得索引使用

---limit
	当偏移量太大时，也无法使用索引


PS:全文索引(了解)
	什么是全文索引：	
	其他索引是把字段的内容作为一个整体进行索引设计
	全文索引，是把内容中的一些“关键字单词”作为索引字段使用。
	类似我们有一篇作文，把作文中的一些关键字给获取出来当成是索引内容。

	全文索引会解决like模糊查找不用索引的问题：
	select * from 表名  like  ‘%内容%’;   ---不会使用索引
	以上模糊查找如果必须使用索引，就可以使用全文索引

	select * from 表名  where  字段  like  ‘%内容%’; ---不会用到全文索引
	select * from 表名  where  match(字段) against(内容) ---会用到全文索引


6.慢查询日志设置
我们要把系统里边一些执行速度非常慢的sql语句给收起起来，并做分析优化，使得其执行速度提高。

> show variables like ‘slow_query%’;  ---查看慢查询的相关参数：
> set global slow_query_log=1;  		---开启慢查询日志收集功能
> show variables like ‘long_query_time’;  ---查看比较的时间阀值
> set long_query_time=时间;   ---设置判断的时间阀值（超过该设置时间的SQL语句会被记录到慢日志中）

7.mysql 常用功能

查看索引是否生效: explain  SELECT * from [table_name];

查看数据表字段索引：show index FROM [table_name];



8.分表
分表设计的两种方式：逻辑分表、物理分表
① 逻辑分表不需要php考虑记录在哪个数据表存储(mysql本身通过算法自行解决)该逻辑分表是mysql本身就支持的技术。
	逻辑分表在数据文件上会以多表的形式显示,在实际显示中还是一张表
② 物理分表需要考虑记录在哪个表存储

8.1 逻辑分表示例：
首先创建一张数据表:
create table goods_RR(
    id  int not null auto_increment comment '主键',
    name varchar(32) not null comment '名称',
    price decimal(10,2) not null default 0 comment '价格',
    pubdate date comment '出厂时间',
    pro_city enum('北京','上海','广州','重庆','沈阳','兰州') comment '产地',
    primary key (id,pubdate)
)engine=myisam charset=utf8 

注意：分表字段必须是主键 或 主键的一部分(复合主键索引的第二个字段也可以)

8.1.1 range分表
根据 “字段/表达式” 是否满足某个范围条件进行分表设计

按照pubdate的年份进行分表
partition by range(year(pubdate))(
    partition hou70  values  less than (1980),
    partition hou80  values  less than (1990),
    partition hou90  values  less than (2000),
    partition hou00  values  less than (2010)
)

8.1.2 list分表
根据 表达式/字段 的内容值是否在某个“列表”中进行分表设计

按照pubdate的月份进行分表
partition by list(month(pubdate))(
    partition spring  values  in (3,4,5),
    partition summer  values  in (6,7,8),
    partition autumn values  in (9,10,11),
    partition winter values  in (12,1,2)
)

range与list分表与业务联系比较紧密，开发者可以自行定义创建分表的算法，
现在使用的key和hash方式的分表的算法，是mysql内部自己定义的，开发者不能干预

8.1.3 key分表
该key分表在写入数据的时候，用户无需关系记录写入到哪个数据表中，mysql有自己的算法可以使得数据被平均分摊到各个分表中
语法：
partition by key(条件字段) partitions 数量;
partition by key(id) partitions 6;（根据ID字段分6张表）


8.1.4 hash分表
Hash分区：的意义主要用于确保数据在预先确定数目的分区中追求平均分配
语法：
partition by hash(表达式/字段) partitions 数量;
partition by hash(month(pubdate)) partitions 5;（根据pubdate字段分5张表）

8.2 物理分表
物理方式分表，自己手动创建多个数据表出来,php程序需要考虑分表算法：数据往哪个表写，从哪个表读
水平分表：是把一个表的全部记录信息分别存储到不同的分表之中。
垂直分表：是把一个表的全部字段分别存储到不同的表里边

php对物理分表的操作示例：

// 假设现在有4张商品表 goods_1,goods_2,goods_3,goods_4
// 1.查找商品
//获取商品ID
$id = $GET['id'];
$yu = $id%4;// 对4取余数,从而得知是哪个表里的数据
$sql = "select * from goods_$yu where id=$id";

//2.修改商品信息
$id = $GET['id'];
$yu = $id%4;// 对4取余数,从而得知是哪个表里的数据
$sql = "update goods_$yu  set 字段名=字段值 where id=$id";

//3.写入一条商品信息
把数据写入数据库前是不知道商品ID的,因此不知道给那张分表写入数据,
可以先创建一张辅表(可以自由id字段),给任何一个分表插入数据前,先给辅表插入一条数据，辅表的记录总和=各个分表的记录算数和
$sql = "insert into 辅表 values(null)";
$new_id = "select mysql_insert_id()";//获取插入辅表的最新记录ID
$yu = $new_id%4;
$sql = "insert into goods_$yu values($new_id,"字段值","字段值","字段值")";


--------------------------------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------------------------------
子查询：
一个查询A的结果，作为另一个查询B的条件，这个查询A称之为子查询。（subquery）。相应的使用该条件的查询B，称之为主查询、父查询。

1.查询语句返回结果的情况：
	1.1:查询返回一行一列：
		select  city from student where id =1;
	父查询可以直接进行相等，大小比较。
	1.2:返回一列多行：
		select city from student where id < 5;	
	不能直接比较，使用专门的运算符。
	1.3:返回一行多列：
		select city,age from student where id =1;
	1.4:返回多行多列：（可以看作为数据表）
		select city,age from student where id < 5;

2.子查询分类：
按照子查询语句返回结果的不同情况，子查询分类如下：
2.1：标量子查询：子查询返回单一值（一行一列）：聚合函数

	--tb_goods中查询比iphone7市价贵的商品信息---
	select * from tb_goods where market_price > (select market_price from tb_goods where name="iphone7");

2.2：列子查询：子查询返回一列N行（这一列数据都对应同一个意义）
	
	1)in(A,B,C):只能取其一。为子查询返回的其中一个值。
	---students schools 查出有“江西”人就读的院系信息---
	select * from schools where id in(select school_id from student where city="江西");

	2)any，满足子查询返回值其中一个比较条件即可。
	---比胡歌，邓超其中一位的工资高的学生信息---
	select * from student where salary > any(select salary from student where name in('胡歌','邓超'));

	3)all满足子查询返回的所有值的比较条件
	---比胡歌，舒淇，张震工资都高的学生信息---
	select * from student where salary > all(select salary from student where name in('胡歌','舒淇','张震'));



2.3：行子查询：子查询返回一行N列（查询多个字段，比较时对应相等）

	---跟贾原同岁的老乡信息---
	select * from student where (city,age)=(select city,age from student where name="贾原");

	a:子查询只能返回一行。
	b:主查询的条件中的多个字段通常放在（）中。
	c:主查询条件中字段顺序与子查询字段列表中字段顺序一致。

2.4：表子查询：子查询返回多行多列（可以看作数据表）,可以作为临时的数据表（temptable）使用。必须为临时表设置别名
	---查询tb_goods中各分类的价格最高的商品---
	select * from (select * from tb_good order by good_price desc) as a group by cid;
	group by 是根据 后面的字段分组，即该字段相同的记录只会显示一行，除非你后面跟的字段的值是唯一 ，才会全部显示，
	group by 通常会用于统计 如 count(),max(),min(),avg(),sum() 等，计算 一组数据的情况 

	(demo1)按sex进行分组之后并排序
	select sex,count(*) from student group by sex asc;

	(demo2)先按grade进行分组，再按sex进行分组
	select *,count(*) from student group by grade,sex;

	(demo3)group_concat(字段名) 可以对分组的结果的某个字段值进行字符串连接，保留该组某个字段的所有值
	select grade,count(*),group_concat(name)  from student group by grade;

	(demo4)五子句综合示例
	SELECT is_audit,count(is_audit) as number,group_concat(name) FROM shicao_audit_new  WHERE id > 0 GROUP BY is_audit  HAVING number > 0 ORDER BY number desc ;(所有分组)
	SELECT is_audit,count(is_audit) as number,group_concat(name) FROM shicao_audit_new  WHERE id > 0 GROUP BY is_audit  HAVING number > 0 ORDER BY number desc LIMIT 1 ;(只取一个分组)

2.5 having
	having有一些where之外的能力,一般在group by 后使用
	(1)统计函数只能having使用
	select grade,count(*) from student group by grade having count(*) >= 2;

	(2)having可以使用字段别名,where不能
	select grade,count(*) as total from student group by grade having total >= 2

2.6:exists子查询（了解）
	where exists条件判断，返回的只有true或者false。如果子查询返回为true，主查询的一行数据返回，否则不返回。
	---文章(artice)作者(user)信息在用户表中存在时，查询作者发布的文章信息---
	select * from articel where exists(select from user where article.uid=user.id);
	---文章(artice)作者(user)信息在用户表中--不存在--时，查询作者发布的文章信息---
	select * from articel where not exists(select from user where article.uid=user.id);


	很多场合必须使用子查询。子查询在执行时需要创建临时表，保存执行结果 。
	执行完毕需要再删除临时表。所以子查询的执行速度会受到一定影响。
	数据量不交大时，如果可以 ，尽量使用连接查询（尤其是嵌套多层时）。


--------------------------------------------------------------------------------------------------------------------------------
联表查询：
1.联合查询
	数据量比较大时，一般会使用分表存储，将数据分布的在不同的数据表中。
	查询时，可以使用SELECT 语句查询不同的数据表，然后将结果集联合起来。

	移动用户：每个省份用户很多。尽量设置表的行数上限在2000万行左右。
	---查询山西和河南月消费大于300的用户信息---
	select * from mobile_shanxi where free1>300 union select * from mobile_henan  where free>300

	在联合查询结果集中，写在最后的order  by是对整个结果集进行排序。
	查询各个省份月话费在300以上的用户手机号。按照话费降序排列
	select * from mobile_shanxi where free1>300 union select * from mobile_henan  where free>300 order by free1

	union  和 union all效率：
	UNION和UNION ALL关键字都是将两个结果集合并为一个，但这两者从使用和效率上来说都有所不同。
	1、对重复结果的处理：UNION在进行表链接后会筛选掉重复的记录，Union All不会去除重复记录。
	2、对排序的处理：Union将会按照字段的顺序进行排序；UNION ALL只是简单的将两个结果合并后就返回。
	从效率上说，UNION ALL 要比UNION快很多，所以，如果可以确认合并的两个结果集中不包含重复数据且不需要排序时的话，那么UNION ALL更适合.

2.内连接查询

2.1：交叉连接
	语法1：select  字段列表 from tb1 cross join tb2 ;
	语法2：select  字段列表 from  tb1,tb2;

	返回笛卡尔积结果集。
	最终结果集的行数：A表的行数  * B表的行数。
	最终结果集的列数：A表的列数  +  B表的列数。
	结果集中出现大量无意义的数据

2.2：内连接
	结果集是两表有关联的数据
语法：select  字段列表 from tb1 [inner] join tb2 on 连接条件  [where 子句];
	  1.select * from apple_p inner join apple_c on apple_p.cid=apple_c.id
	  2.select p.*,c.name as cat_name from apple_p  as p inner join apple_c as c on p.cid=c.id

3.外连接查询

3.1：左连接，左边表为主
	语法：select  字段列表 from  tb1 left【outer】 join tb2 on 连接条件;
	
	左表记录多于右表（匹配），左表中无法连接的记录同样返回（显示左表的所有行），右表中对应字段使用null填充。
	左表记录少于右表，相当于内连接。

3.2：右链接，右边表为主
	语法：select  字段列表 from  tb1 right [outer] join tb2 on 连接条件;

	右表记录多于左表，右表中无法连接的记录同样返回，左表中对应字段使用null填充
	右表记录少于左表，相当于内连接。

--------------------------------------------------------------------------------------------------------------------------------
数据库管理：
1.创建用户 
		create user “用户名” @“主机名” 	  [identified by “密码”];
		create user "laowang"@"localhost" identified by "123456"

2.修改密码
		set password [for "用户"@"主机"] = password(密码);
		set password [for "laowang"@"localhost"] = password(654321);
		超级管理员可以为自身及其他用户设置密码，普通用户只能修改自身的密码

3.用户授权
	root账号为管理员权限，具有最高的权限，具备给其他用户分配权限的权利。
	可以给新创建的用户分配权限。分配权限应该遵循“最小权限原则”。
	
	grant 权限1，权限2  on 数据库.数据表  to "用户名"@"主机名" ;
	grant insert,update  on php68.artice  to "laowang"@"localhost" ;

	flush PRIVILEGES---刷新生效


	分配用户可以在指定数据库中指定数据表上进行的指定数据操作
	权限名字可以小写。全部权限（除授权权限之外）可以使用all代替
	数据库的全部数据表使用 数据库.* 
	管理员root分配

4.取消用户授权了解
	revoke 权限1,权限2  on db.tb from "用户名"@"主机名" ;
	revoke insert,update  on php68.article from "laowang"@"localhost" ;
	flush privileges;  //刷新权限

5.删除用户
	drop user “用户名”@”主机名”;
	drop user "laowang"@"localhost"; 

--------------------------------------------------------------------------------------------------------------------------------
数据库基本操作语句：
查看数据表创建语句：
show create table 表名\G;

数据表创建语句：
CREATE TABLE `it_dic` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '数据字典 ID',
  `code` varchar(255) DEFAULT NULL COMMENT '编码',
  `img` varchar(255) DEFAULT NULL COMMENT '图片路径',
  `created_at` timestamp NULL DEFAULT NULL COMMENT '添加时间',
  `updated_at` timestamp NULL DEFAULT NULL COMMENT '修改时间',
  `created_userid` tinyint(4) DEFAULT NULL COMMENT '创建人',
  `updated_userid` tinyint(4) DEFAULT NULL COMMENT '修改人',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=COMPACT COMMENT='数据字典'


查看数据库创建语句：
show create database 数据库名\G;

新增字段：
ALTER TABLE `it_demo`.`it_dic` 
ADD COLUMN `year字段名` varchar(255) NULL COMMENT '年份' AFTER `updated_userid`;

修改字段信息：
ALTER TABLE `it_demo`.`it_dic` 
MODIFY COLUMN `order字段名` int(11) NULL DEFAULT NULL COMMENT '排序' AFTER `parent_id`;


601.mysql的SQL_model设置参考：
https://www.cnblogs.com/clschao/articles/9962347.html
