<?php

一：global的使用
注意：不能在用global声明变量的同时给变量赋值。像global $name = "why"的使用方式是错误的。

示例1：
$name = "why";
function changeName(){
    $name = "what";
}
changeName();
echo "my name is " . $name . "<br/>";

执行代码的结果是：my name is why，而不是执行changeName()后显示what。
分析原因，这是因为函数体changeName内$name变量被缺省设置为局部变量,$name的作用域就是在changeName内.

echo "____________________________________". "<br/>";

示例2：
global $name;
$name = "why";
function changeName(){
    $name = "what";
}
changeName();
echo "my name is " . $name . "<br/>";

定义全局变量后执行的结果仍然为my name is why，这个结果让我吃惊。
原来，global的正确用法是："在一个函数中引入外部的一个变量，如果该变量没有通过参数传递进来，那么就通过global引入进来。" 
也就是说，当一个函数引用一个外部变量时，可以在函数内通过global来声明该变量，这样该变量就可以在函数中使用了（相当于当作参数传递进来-引用传值）。

echo "____________________________________". "<br/>";

示例3：
$name = "why";
function changeName(){
    global $name;//这里相当于changeName(&$name)
    $name = "what";
}
changeName();
echo "my name is " . $name . "<br/>";

这次的运行结果是：my name is what，说明global是起传递参数的作用，而并非使变量的作用域为全局

echo "____________________________________". "<br/>";

示例4：
$name = "why";
function changeName(){
    global $name;
    $name = "what";
}
function changeName2(){
    $name = "where";
}
changeName();
changeName2();
echo "my name is " . $name . "<br/>";

执行结果为：my name is what，如果在changeName2()中添加global $name，运行结果则是：my name is where。

************************************************************************************
综上，global的作用就相当于传递参数，在函数外部声明的变量，如果在函数内想要使用，
就用global来声明该变量，这样就相当于把该变量传递进来了，就可以引用该变量了。
************************************************************************************

echo "____________________________________". "<br/>";

二：$CLOBAL的使用　

PS:除了使用global参数定义外，还可以使用超全局变量$GLOBAL：

$name = "why";
function changeName(){
    $GLOBALS['name'] = "what";
}
changeName();
echo "my name is " . $name . "<br/>";
执行结果为：my name is what

echo "____________________________________". "<br/>";

三：global和$GLOBAL使用示例1：

$var1 = 1;
$var2 = 2;
function test1(){
	//这一行相当于下面两行
    $GLOBALS['var2'] = &$GLOBALS['var1'];
    
    //下面两行相当于上面一行
    //global $var1;//
    //$GLOBALS['var2'] = $var1;
}
test1();
echo $var2 . "<br />";//1

$var3 = 1;
$var4 = 2;
function test2(){
    global $var3,$var4;
    $var4 = &$var3;//如果不理解，可以将该行换成下面的两行中的任意一行进行测试
     //$var4 = $var3;
    // $var4 = 55;
}
test2();
echo $var4 . "<br />";//2

输出$var2的值为1，$var4的值为2，因为$var3的引用指向了$var4的引用地址,$var4的实际值并没有改变。

官方的解释是：
$GLOBALS['var']是外部的全局变量本身，
global $var 是外部 $var 的同名引用或者指针。

意味着 $GLOBAL在一个脚本的全部作用域中都可用，在函数或方法中无需执行global $variable; 
就可以访问它们。与所有其他超全局变量不同，$GLOBALS在PHP中总是可用的。

echo "____________________________________". "<br/>";

四：global和$GLOBAL使用示例2：

$var1 = 1;
function test1(){
    unset($GLOBALS['var1']);
}
test1();
echo $var1 . "<br />";

$var2 = 1;
function test2(){
    global $var2;
    unset($var2);
}
test2();
echo $var2;

输出结果是$var1不存在，而$var2的值为1。
这就证明，$var2只是别名引用，本身的值没有受到任何的改变。
也就是说global $var 其实就是 $var = &$GLOBALS['var']，调用外部变量的一个别名而已！




php引用和指针的区别
本质：
引用是别名，指针是地址

具体：
1、从现象上看，指针在运行时可以改变其所指向的值，而引用一旦和某个对象绑定后就不再改变。这句话可以理解为：指针可以被重新赋值以指向另一个不同的对象。但是引用则总是指向在初始化时被指定的对象，以后不能改变，但是指定的对象其内容可以改变。

2、从内存分配上看，程序为指针变量分配内存区域，而不为引用分配内存区域，因为引用声明时必须初始化，从而指向一个已经存在的对象。引用不能指向空值。

3、从编译上看，程序在编译时分别将指针和引用添加到符号表上，符号表上记录的是变量名及变量所对应地址。指针变量在符号表上对应的地址值为指针变量的地址值，而引用在符号表上对应的地址值为引用对象的地址值。

符号表生成后就不会再改，因此指针可以改变指向的对象（指针变量中的值可以改），而引用对象不能改。这是使用指针不安全而使用引用安全的主要原因。从某种意义上来说引用可以被认为是不能改变的指针。

4、不存在指向空值的引用这个事实，意味着使用引用的代码效率比使用指针的要高。因为在使用引用之前不需要测试它的合法性。相反，指针则应该总是被测试，防止其为空。

5、理论上，对于指针的级数没有限制，但是引用只能是一级。
如下：
int** p1;         // 合法。指向指针的指针

int*& p2;         // 合法。指向指针的引用

int&* p3;         // 非法。指向引用的指针是非法的

int&& p4;         // 非法。指向引用的引用是非法的