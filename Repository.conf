<?php
//新添1
public function store1($request)
{
    \DB::beginTransaction();

    try {
            $organization_id = \DB::table('organization')->insertGetId([
                'org_name'          => $request->get('org_name'),
                'org_type'          => $request->get('org_type'),
                'org_tel'           => $request->get('org_tel'),
                'org_desc'          => $request->get('org_desc'),
                'parent_id'         => $request->get('parent_id'),
                'order'             => $request->get('order'),
                'created_userid'    => $request->get('created_userid'),
                'created_at'        =>Carbon::now(),//使用DB类操作数据的时候created_at,updated_at需要自行维护
                'updated_at'        =>Carbon::now(),
            ]);

        \DB::commit();

        return $this->respondWith([
                'created'  => !!$organization_id,
                'Organization' => Organization::find($organization_id),
        ]);
    } catch (\Exception $e) {
        \DB::rollBack();
        return $e;
    }
}
//新添2
public function store2($request)
{
    \DB::beginTransaction();
    try {
        $result=$this->create($request->all());
        \DB::commit();
        return $this->respondWith([
                'created'  => !!$result,
                'Organization' => $result,
        ]);
    } catch (\Exception $e) {
        \DB::rollBack();
        return $e;
    }
}

//更新1
public function renew1($request, $id)
{
    \DB::beginTransaction();
    try{
        $result = $this->update([
            'org_name'          => $request->get('org_name'),
            'org_type'          => $request->get('org_type'),
            'org_tel'           => $request->get('org_tel'),
            'org_desc'          => $request->get('org_desc'),
            'parent_id'         => $request->get('parent_id'),
            'order'             => $request->get('order'),
            'created_userid'    => $request->get('created_userid'),
            'updated_at'        =>Carbon::now(),
        ], $id);
        \DB::commit();
        return $this->respondWith(['updated' => !! $result]);
    }catch (\Exception $e){
        \DB::rollBack();
        return $e;
    }

}

//更新2
public function renew2($request, $id)
{
    \DB::beginTransaction();
    try{
        $result = $this->update($request->all(),$id);
        \DB::commit();
        return $this->respondWith(['updated' => !! $result]);
    }catch (\Exception $e){
        \DB::rollBack();
        return $e;
    }

}



//所有数据
$data = BlogAbout::offset($offset)
    ->limit($limit)
    ->orderby($columnname, $orderway)
    ->where('name', 'like', "%$title%")
    //use($datemin,$datemax)通过use()使用全局变量
    ->where(function ($query) use ($datemin, $datemax) {
        if ($datemin != '') {
            $query->where('created_at', '>=', $datemin);
        }
        if ($datemax != '') {
            $query->where('created_at', '<=', $datemax . ' 23:59:59');
        }
    })
    ->get();

//Repository可用方法
public function all($columns = ['*'])  //获取所有记录

public function paginate($perPage = 15, $columns = ['*'])   //分页，默认每页15条

public function create(array $data);    //创建一条记录

public function save(array $data)  //保存

public function delete($id)   //删除一条记录

public function update(array $data, $id)   //更新记录

public function find($id, $columns = ['*'])   //按id查找

public function findBy($field, $value, $columns = ['*'])   //按指定字段查找

public function findWhere($where, $columns = ['*'])   //按多个条件查找

//创建一条记录:
$this->Poem->create(Input::all());
//更新记录:
$this->Poem->update(Input::all(), $id);
//删除记录:
$this->poem->delete($id);
//按id查找;
$this->poem->find($id);
//你可以指定要查询的字段:
$this->poem->find($id, ['title', 'description', 'author']);
//根据指定字段的值来查找.
$this->poem->findBy('title', $title);
//多个条件查找
$this->poem->findWhere([
    'author' => $author_id,
    ['year','>',$year]
]);