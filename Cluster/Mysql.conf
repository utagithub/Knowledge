mysql主从

创建集群使用的网络
docker network create --driver bridge  mysql

************************************************************************************************************************
master：

docker run -itd -p 33066:3306 \
--privileged=true \
-v /Users/wang/web_docker/mysql/master/log:/var/log/mysql \
-v /Users/wang/web_docker/mysql/master/data:/var/lib/mysql \
-v /Users/wang/web_docker/mysql/master/conf.d/:/etc/mysql/conf.d \
-e MYSQL_ROOT_PASSWORD=root \
--name mysql_master \
--net mysql \
mysql:latest

************************************************************************************************************************
slave1：

docker run -itd -p 33067:3306 \
--privileged=true \
-v /Users/wang/web_docker/mysql/slave1/log:/var/log/mysql \
-v /Users/wang/web_docker/mysql/slave1/data:/var/lib/mysql \
-v /Users/wang/web_docker/mysql/slave1/conf.d:/etc/mysql/conf.d \
-e MYSQL_ROOT_PASSWORD=root \
--name mysql_slave1 \
--net mysql \
mysql:latest

************************************************************************************************************************
slave2：

docker run -itd -p 33068:3306 \
--privileged=true \
-v /Users/wang/web_docker/mysql/slave2/log:/var/log/mysql \
-v /Users/wang/web_docker/mysql/slave2/data:/var/lib/mysql \
-v /Users/wang/web_docker/mysql/slave2/conf.d:/etc/mysql/conf.d \
-e MYSQL_ROOT_PASSWORD=root \
--name mysql_slave2 \
--net mysql \
mysql:latest

************************************************************************************************************************
docker启动的mysql设置server_id不同
删除/etc/my.cnf
重新生成(主从注意修改server-id):
cat >> /etc/my.cnf << EOF
[mysqld]

skip-host-cache
skip-name-resolve
datadir=/var/lib/mysql
socket=/var/run/mysqld/mysqld.sock
secure-file-priv=/var/lib/mysql-files
user=mysql
server-id=30
pid-file=/var/run/mysqld/mysqld.pid
[client]
socket=/var/run/mysqld/mysqld.sock

!includedir /etc/mysql/conf.d/
EOF
************************************************************************************************************************
MySQL主从复制-读写分离配置

1.保证主从服务器的项目数据库，字符集，字符集排序，用户名，密码一致

2.保证集群中的mysql具有可远程访问的权限
    select host, user from user;
更改 "mysql" 数据库里的 "user" 表里的 "host" 项，从"localhost"改为"%"，
update user set host="%" where host='localhost' and user='root';
然后重启mysql这样就允许所有的远程机器进行访问了。

设置刷新生效：flash PRIVILEGES


负载均衡主机  ：192.168.43.130
静态资源服务器：192.168.43.130
主mysql(负责写)：192.168.43.131   -----从服务器访问主服务器同步数据的账号：linken 密码：1234
从mysql(负责读)：192.168.43.132   192.168.43.130

主，从mysql开启bin日志功能
vi /etc/my.cnf
主mysql：
log_bin=on
server_id=10

从mysql：
log_bin=on
server_id=20
server_id随便给，主从不一致即可（设置完成后重启mysql服务）

在主服务器上创建一个slave账号，供从服务器连接使用：在主MYSQL中执行以下SQL语句
mysql5.7前
grant replication slave on *.* to 'linken'@'%' identified by '1234';
mysql8
CREATE USER 'linken'@'%' IDENTIFIED WITH mysql_native_password BY 'root';
grant replication slave on *.* to 'linken'@'%';

命令解析：
grant replication slave：创建一个有主从复制功能的账号
on *.*：允许复制全部数据库/全部数据表
'linken'：账号名字是linken，可以自定义为其他
'%'：允许“从mysql”通过“任何”主机进行复制(本地linux可以使用该帐号，外部应用也可以使用该帐号)
identified by '1234'：帐号密码是1234


查看主MySQL状态：show master status
会显示主服务器的日志信息，
给从mysql执行以下语句：（master_log_file，master_log_pos可以从主服务器状态找那个看出来）
change master to master_host='172.23.0.2',master_user='linken',master_password='root',master_log_file='binlog.000002',master_log_pos=666;

命令解析：
change master to：从mysql与主mysql联系建立从属关系
master_host：主服务器主机名
master_user：帐号
masterpassword：密码
master_log_file：主服务器日志文件
master_log_pos：位

从mysql启动复制功能：
start slave；
show slave status


如果ip发生变化:

linux主机需要修改IP（mysql主服务器修改了IP）

主从mysql需要执行以下操作
从：stop slave
主：show status master
change master to master_host='172.23.0.2',master_user='linken',master_password='root',master_log_file='binlog.000003',master_log_pos=1089;
从：start slave
从：show slave status


项目env修改
DB_CONNECTION=mysql
DB_HOST_READ_TWO=192.168.12.132
DB_HOST_READ_ONE=192.168.12.130
DB_HOST_WRITE=192.168.12.131
DB_PORT=3306
DB_DATABASE=mrwang
DB_USERNAME=root
DB_PASSWORD=123456

laravle-database.conf文件
'mysql' => [
            'driver' => 'mysql',
            #'host' => env('DB_HOST', '127.0.0.1'),
            'read'   =>['host'=>[env('DB_HOST_READ_ONE'),env('DB_HOST_READ_TWO')]],
            'write'  =>['host'=>env('DB_HOST_WRITE')],
            'port' => env('DB_PORT', '3306'),
            //'unix_socket' => '/Applications/MAMP/tmp/mysql/mysql.sock',
            'database' => env('DB_DATABASE'),
            'username' => env('DB_USERNAME'),
            'password' => env('DB_PASSWORD'),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
            'prefix' => '',
            'strict' => false,
            'engine' => null,
        ],




