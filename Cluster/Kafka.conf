zookeper_kafka

启动顺序: zookeper kafka mysql eagle

参考（https://developer.aliyun.com/article/988818）

********************************************
多节点：（可扩展pod）
version: '2'
services:
  zookeeper:
    image: zookeeper:latest
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"#- "9092:9092" 这样可以是单节点但不可扩展pod
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.199.234:9092
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
********************************************


扩展kafka broker数量为2个
docker-compose up --scale kafka=2 -d
********************************************

创建topic:在kafka节点1执行:（随便一个节点）
创建一个topic,名为kafka_test,2个partition,副本因子2执行以下命令即可:
kafka-topics.sh --create --topic kafka_test --partitions 2 --zookeeper zookeeper:2181 --replication-factor 1

删除topic:
kafka-topics.sh --delete --zookeeper zookeeper:2181  --topic kafka_test

查看有哪些topic:在kafka节点3执行:（随便一个节点）
kafka-topics.sh --list --zookeeper zookeeper:2181
kafka-topics.sh --list --zookeeper zookeeper:2181 kafka_test

查看刚刚创建的topic的情况,borker和副本情况一目了然,如下
kafka-topics.sh --describe --topic kafka_test --zookeeper zookeeper:2181
********************************************
查看有哪些消费者组:在kafka节点3执行:（随便一个节点）
kafka-consumer-groups.sh --bootstrap-server --list kafka-kafka-1:9092,kafka-kafka-2:9092,kafka-kafka-3:9092,kafka-kafka-4:9092

查看消费者组信息:如当前偏移量,最后一条消息偏移量,消息堆积等
kafka-consumer-groups.sh --describe --group testGroup1 --bootstrap-server kafka-kafka-1:9092,kafka-kafka-2:9092,kafka-kafka-3:9092,kafka-kafka-4:9092

********************************************


消费者:
执行如下命令等待消费消息:
没有指定消费者组:
kafka-console-consumer.sh --topic kafka_test --bootstrap-server kafka-kafka-1:9092,kafka-kafka-2:9092,kafka-kafka-3:9092,kafka-kafka-4:9092
指定消费者组:testGroup1,(多播:多个消费者组,每个组中都有一个消费者可以消费消息)(单播:一个消费者组中只有一个消费者可以消费消息)(多个消费者:开多个控制台端口)
kafka-console-consumer.sh --topic kafka_test --consumer-property.groupid=testGroup1 --bootstrap-server kafka-kafka-1:9092,kafka-kafka-2:9092,kafka-kafka-3:9092,kafka-kafka-4:9092
kafka-console-consumer.sh --topic kafka_test --consumer-property.groupid=testGroup2 --bootstrap-server kafka-kafka-1:9092,kafka-kafka-2:9092,kafka-kafka-3:9092,kafka-kafka-4:9092

生产者:
执行如下命令生产消息:
kafka-console-producer.sh --topic kafka_test --broker-list kafka-kafka-1:9092,kafka-kafka-2:9092,kafka-kafka-3:9092,kafka-kafka-4:9092

********************************************

kafka-eagle容器用于监控kafka集群信息:
docker run -itd \
-p 8048:8048 \
--privileged=true \
--name kafka-eagle \
-v /Users/wang/web_docker/kafka/eagle:/usr/software \
--net kafka_default \
ubuntu:latest

********************************************
kafak-eagle容器:

1.eagle需要jdk环境
docker cp /Users/wang/Downloads/jdk-8u361-linux-aarch64.tar.gz	60f88f49793860f75c644db4251e7eb4a12c16fa6d399688c473f92dc7d8502d:/usr/software/jdk-8u361-linux-aarch64.tar.g


2.下载eagle,并且配置环境变量
wget https://github.com/smartloli/kafka-eagle-bin/archive/v3.0.1.tar.gz


export KE_HOME=/usr/software/kafka-eagle/bin
export JAVA_HOME=/usr/software/jdk1.8
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:${KE_HOME}/bin:$PATH
alias ll='ls -lai -G'

3.修改kafka-eagle配置文件(system-config.properties)
efak.zk.cluster.alias=cluster1
cluster1.zk.list=172.21.0.2:2181

efak.driver=com.mysql.cj.jdbc.Driver
efak.url=jdbc:mysql://172.21.0.4:3306/ke?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull
efak.username=root
efak.password=root

配置完成后如果启动失败,查看错误日之后参考（https://blog.csdn.net/weixin_42629445/article/details/120717860）
修改ke.sh相关配置

4.vim ~/.bashrc
添加:
source /etc/profile

5.启动服务
/usr/software/kafka-eagle/bin/ke.sh start

vim .bashrc
配置登录启动:
if echo "$-" | /usr/software/kafka-eagle/bin/ke.sh start > /dev/zero; then
  echo 123 > /dev/zero;
fi

********************************************
mysql容器用于存储kafka-eagle监控kafka集群的信息:

docker run -itd \
-p 13066:3306 \
--privileged=true \
-v /Users/wang/web_docker/kafka/mysql/log:/var/log/mysql \
-v /Users/wang/web_docker/kafka/mysql/data:/var/lib/mysql \
-v /Users/wang/web_docker/kafka/mysql/conf.d/:/etc/mysql/conf.d \
-e MYSQL_ROOT_PASSWORD=root \
--name kafka-mysql \
--net kafka_default \
mysql:latest

