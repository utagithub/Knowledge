redis主从/哨兵 高可用

创建集群使用的网络（https://www.jianshu.com/p/fad0f8fdb855）
docker network create --driver bridge  redis
********************************************

新建redis.conf(参考官网)和snetinel.conf(参考官网)
master（redis.conf）设置：
requirepass:redis
bind 0.0.0.0
appendonly yes

slave（redis.conf）配置:
requirepass:redis
bind 0.0.0.0
appendonly yes
replicaof 172.18.0.2
masterauth redis
********************************************

snetinel.conf配置
#访问控制关闭
protected-mode no
#端口
port 26379
bind 0.0.0.0
daemonize yes
#哨兵master节点 2是指有几个哨兵节点发现master宕机，才进行故障转移
sentinel monitor mymaster 172.18.0.2 6379 2
#设置主机访问密码
sentinel auth-pass mymaster redis
#哨兵多长时间连接不上master就认为master宕机了
sentinel down-after-milliseconds mymaster 60000
sentinel failover-timeout mymaster 180000
sentinel parallel-syncs mymaster 1

********************************************
master：

docker run -itd \
-p 6370:6379 \
-p 26370:26379 \
--privileged=true \
-v /Users/wang/web_docker/redis/master/conf:/usr/local/etc/redis \
-v /Users/wang/web_docker/redis/master/data:/data \
--name redis_master \
--net redis \
redis:7.0 redis-server /usr/local/etc/redis/redis.conf

********************************************
slave_1：

docker run -itd \
-p 6371:6379 \
-p 26371:26379 \
--privileged=true \
-v /Users/wang/web_docker/redis/slave_1/conf:/usr/local/etc/redis \
-v /Users/wang/web_docker/redis/slave_1/data:/data \
--name redis_slave_1 \
--net redis \
redis:7.0 redis-server /usr/local/etc/redis/redis.conf

********************************************
slave_2：

docker run -itd \
-p 6372:6379 \
-p 26372:26379 \
--privileged=true \
-v /Users/wang/web_docker/redis/slave_2/conf:/usr/local/etc/redis \
-v /Users/wang/web_docker/redis/slave_2/data:/data \
--name redis_slave_2 \
--net redis \
redis:7.0 redis-server /usr/local/etc/redis/redis.conf

********************************************

进入三个容器启动哨兵：
redis-sentinel /usr/local/etc/redis/sentinel.conf


(1）info
查看sentinel的状态
(2）sentinel masters
获取sentinel中监控的所有master的节点
(3）sentinel master <master-name>
获取master-name节点redis的状态信息
(4）sentinel slaves <master-name>
获取master-name节点下所有的slaves的状态信息

哨兵客户端：redis-cli -p 26379
sentinel master mymaster
sentinel slaves mymaster
sentinel sentinels mymaster

****************************************************************************************************************************************************************
redis-cluster集群：

创建集群专用网络
docker network create --driver bridge  redis-cluster

********************************************
redis.conf配置

#requirepass:redis
protected-mode no
bind 0.0.0.0
appendonly yes
#开启集群
cluster-enabled yes
#集群配置，配置文件首次启动生效
cluster-config-file ***.conf
#请求超时时间
cluster-node-timeout 5000

********************************************
安装redis集群管理工具

先安装ruby
apt-get update && apt-get install wget
apt-get install ruby ruby-dev rubygems

wget https://rubygems.org/downloads/redis-5.0.6.gem
gem install redis-5.0.6.gem
********************************************

启动集群：
#redis-cli -a redis --cluster create --cluster-replicas 1 172.19.0.2:6379 172.19.0.3:6379 172.19.0.4:6379 172.19.0.5:6379 172.19.0.6:6379 172.19.0.7:6379
redis-cli --cluster create --cluster-replicas 1 172.19.0.2:6379 172.19.0.3:6379 172.19.0.4:6379 172.19.0.5:6379 172.19.0.6:6379 172.19.0.7:6379

查看集群节点信息：
1 redis-cli -h 172.19.0.2 -p 6379 -c
2 auth redis
3 cluster nodes

集群模式登录（操作key）
redis-cli -c
********************************************
node_1:

docker run -itd \
-p 63791:6379 \
--privileged=true \
-v /Users/wang/web_docker/redis/cluster/node_1/conf:/usr/local/etc/redis \
-v /Users/wang/web_docker/redis/cluster/node_1/data:/data \
--name redis_node_1 \
--net redis-cluster \
redis:7.0 redis-server /usr/local/etc/redis/redis.conf

********************************************
node_2:

docker run -itd \
-p 63792:6379 \
--privileged=true \
-v /Users/wang/web_docker/redis/cluster/node_2/conf:/usr/local/etc/redis \
-v /Users/wang/web_docker/redis/cluster/node_2/data:/data \
--name redis_node_2 \
--net redis-cluster \
redis:7.0 redis-server /usr/local/etc/redis/redis.conf

********************************************
node_3:

docker run -itd \
-p 63793:6379 \
--privileged=true \
-v /Users/wang/web_docker/redis/cluster/node_3/conf:/usr/local/etc/redis \
-v /Users/wang/web_docker/redis/cluster/node_3/data:/data \
--name redis_node_3 \
--net redis-cluster \
redis:7.0 redis-server /usr/local/etc/redis/redis.conf

********************************************
node_4:

docker run -itd \
-p 63794:6379 \
--privileged=true \
-v /Users/wang/web_docker/redis/cluster/node_4/conf:/usr/local/etc/redis \
-v /Users/wang/web_docker/redis/cluster/node_4/data:/data \
--name redis_node_4 \
--net redis-cluster \
redis:7.0 redis-server /usr/local/etc/redis/redis.conf

********************************************
node_5:

docker run -itd \
-p 63795:6379 \
--privileged=true \
-v /Users/wang/web_docker/redis/cluster/node_5/conf:/usr/local/etc/redis \
-v /Users/wang/web_docker/redis/cluster/node_5/data:/data \
--name redis_node_5 \
--net redis-cluster \
redis:7.0 redis-server /usr/local/etc/redis/redis.conf

********************************************
node_6:

docker run -itd \
-p 63796:6379 \
--privileged=true \
-v /Users/wang/web_docker/redis/cluster/node_6/conf:/usr/local/etc/redis \
-v /Users/wang/web_docker/redis/cluster/node_6/data:/data \
--name redis_node_6 \
--net redis-cluster \
redis:7.0 redis-server /usr/local/etc/redis/redis.conf
****************************************************************************************************************************************************************
内置集群-代理解决方案：
twemproxy:

创建代理集群专用网络：
docker network create --driver bridge  redis-twemproxy

redis.conf:
protected-mode no
bind 0.0.0.0
appendonly yes

docker run -itd \
-p 63797:6379 \
--privileged=true \
-v /Users/wang/web_docker/redis/twemproxy/node_1/conf:/usr/local/etc/redis \
-v /Users/wang/web_docker/redis/twemproxy/node_1/data:/data \
--name redis_tp_1 \
--net redis-twemproxy \
redis:7.0 redis-server /usr/local/etc/redis/redis.conf

docker run -itd \
-p 63798:6379 \
--privileged=true \
-v /Users/wang/web_docker/redis/twemproxy/node_2/conf:/usr/local/etc/redis \
-v /Users/wang/web_docker/redis/twemproxy/node_2/data:/data \
--name redis_tp_2 \
--net redis-twemproxy \
redis:7.0 redis-server /usr/local/etc/redis/redis.conf

docker run -itd \
-p 63799:6379 \
--privileged=true \
-v /Users/wang/web_docker/redis/twemproxy/node_3/conf:/usr/local/etc/redis \
-v /Users/wang/web_docker/redis/twemproxy/node_3/data:/data \
--name redis_tp_3 \
--net redis-twemproxy \
redis:7.0 redis-server /usr/local/etc/redis/redis.conf

********************************************

twemproxy容器用于三台没有主从关系的节点（各自独立）:

docker run -dit \
-p 22121:22121 \
--privileged=true \
--name redis_tp_manager \
--net redis-twemproxy \
ubuntu:latest

1.下载twemproxy
cd /usr/software
wget https://github.com/twitter/twemproxy/archive/refs/heads/master.zip

2.安装辅助工具
apt-get install automake automake libtool make

3.安装twemproxy
cd /usr/software/twemproxy
autoreconf -fvi
./configure --enable-debug=full --prefix=/usr/local/twemproxy
make && make install

4.新建twemproxy配置文件目录，运行文件目录
mkdir /usr/local/twemproxy/sbin/conf
mkdir /usr/local/twemproxy/run

4.1配置文件：
vim /usr/local/twemproxy/sbin/conf/nutcracker.yml
alpha:
  listen: 172.20.0.5:22121
  hash: fnv1a_64
  distribution: ketama
  auto_eject_hosts: true
  redis: true
  server_retry_timeout: 2000
  server_failure_limit: 1
  servers:
   - 172.20.0.2:6379:1
   - 172.20.0.3:6379:1
   - 172.20.0.4:6379:1

4.2检出配置文件是否正确：
cd /usr/local/twemproxy/sbin
./nutcracker -t

4.3启动服务：
/usr/local/twemproxy/sbin/nutcracker -d -c /usr/local/twemproxy/sbin/conf/nutcracker.yml \
-p /usr/local/twemproxy/run/redisproxy.pid \
-o /usr/local/twemproxy/run/redisproxy.log

vim .barch
配置登录启动：
if echo "$-" | /usr/local/twemproxy/sbin/nutcracker -d -c /usr/local/twemproxy/sbin/conf/nutcracker.yml -p /usr/local/twemproxy/run/redisproxy.pid -o /usr/local/twemproxy/run/redisproxy.log > /dev/zero; then
  echo 123 > /dev/zero;
fi

4.4在redis节点执行以下命令即可使用代理操作redis:
redis-cli -h 172.20.0.5 -p 22121
注意:客户端操作的时候不是所有原生命令都可以使用，get/set测试能使用即可
