<?php

/**
 * [laravel_study 依赖注入,控制翻转,反射各个概念的理解和使用
如何实现Ioc容器和服务提供者是什么概念
Facades外观模式背后实现原理
Contracts契约之面向接口编程
中间件,管道之面向切面编程
Laravel生命周期
Laravel事件之观察者模式
新特性trait在Laravel中的应用
为什么laravel没有规划models目录?
Eloquent ORM中的方法find方法的实现流程
如果开发Laravel扩展包和发布到composer
Laravel与前端最佳实践
基于JWT的api认证
负载均衡,分布式,集群的理解,多台服务器代码如何同步
基于教程实现的一个简单网站实例]
 * @return [type] [description]
 */
function laravel_study(){
    return "https://xueyuanjun.com/books/laravel-tutorial#toc-21";
}




一般情况下，一个项目 应该 有以下三个基本的项目环境：
Local       - 开发环境
Staging     - 线上测试环境
Production  - 线上生产环境

创建APP密钥：
php artisan key:generate


如果使用laravel的auth认证，数据表密码字段需要是password,而且密码的加密方式需要是bcrypt方式
php artisan tinker 可以再命令行操作laravel
php artisan serve  本地项目开启端口为8000的虚拟主机
php artisan list make   查看artisan make指令可以执行的命令

1.迁移文件
php artisan make:migration create_***_table --create=***        创建迁移文件:
指定创建的迁移文件位置：
php artisan make:migration create_test_table --path=./database/migrations/commonXd/fql
php artisan make:migration add_girl_to_***_table --table=***    创建迁移文件添加字段:给已经建立好的表添加girl字段
php artisan migrate --path=/database/migrations/v5.7

php artisan make:migration create_fpg_server_table --path=/database/migrations/v5.7
php artisan make:migration create_loan_cp_table --path=/database/migrations/v5.8
php artisan make:migration create_gmxt_account_table --path=/database/migrations/v5.10

php artisan make:migration ModifyHouseCertificateNoLength50ToGuarantyInfoTable --path=/database/migrations/v5.8.1
php artisan migrate --path=/database/migrations/v5.8.1

php artisan migrate:rollback  --path=/database/migrations/v5.8


php artisan make:migration add_fields_to_cp_product_table --table=cp_product --path=/database/migrations/v5.10
php artisan migrate --path=/database/migrations/v5.10
php artisan migrate --path=/database/migrations/v5.10/CreateGmxtAccountTable
php artisan make:migration create_gmxt_task_retry_table --path=/database/migrations/v5.10


php artisan migrate     执行迁移文件：
php artisan migrate:status  查看数据库迁移文件的执行情况：
php artisan  migrate:refresh      先执行所有的迁移文件的down方法，再执行所有的迁移文件的up方法
php artisan  migrate:reset        执行所有迁移文件的down方法
注意：第一次执行php artisan migrate时，会自动创建一个migrations表，用于记录迁移文件信息的，batch字段表示批次，回滚时按批次来

php artisan migrate:rollback    如果创建的表有问题，可以使用如下命令回滚。

laravel中如果在.env中添加了新配置或修改了配置没有生效可以执行以下两个操作

php artisan config:cache    
    缓存配置文件（将应用部署到生产环境时，记得在部署过程中运行这个命令可以将所有
    Laravel 的配置文件合并到单个文件中缓存，此举能大大减少框架在加载配置值时必须执行的系统文件的数量。）
php artisan config:clear    清除缓存

php artisan serve  
如果你在本地安装了 PHP，并且想使用 PHP 内置的开发服务器来为你的应用程序提供服务，
那就使用 Artisan 命令 serve。这个命令会在 http://localhost:8000 上启动开发服务器

php artisan make:controller API/PhotoController --api   ->不包含create 和 edit方法  ---资源路由  Route::apiResources(['photos' => 'PhotoController']);
php artisan make:controller API/PhotoController --resource ->包含create 和 edit方法  --- Route::apiResources(['photos' => 'PhotoController']);
php artisan make:controller API/PhotoController --resource --model=Http\Models\Photo  ->在资源控制器的方法中使用类型提示 （前提是使用了路由模型绑定）
改命令可以创建自带基本方法的控制器

//实例
 public function up()
    {
        Schema::create('stu', function (Blueprint $table) {
            $table->engine='InnoDB';//设置存储引擎
            $table->increments('id');
            $table->string('student_name',50)->comment('学生名称');
            $table->enum('sex',[0,1])->comment('性别1男,0女');
            $table->string('student_num',50)->comment('学生账号');
            $table->string('password',50)->comment('学生密码');
            $table->integer('class_id')->comment('所属班级');
            $table->integer('teacher_id')->comment('授课老师');
            $table->integer('create_userid')->comment('创建者');
            $table->text('desc')->comment('备注');
            $table->timestamps();//加入created_at和 updated_at字段
            $table->rememberToken();加入remember_token字段，使用类型为varchar(100)
            $table->softDeletes();加入 deleted_at字段软删除使用


            修饰方法表
            $table->float('amount')->first()将此字段放在表的首位（只能在MySQL中使用）
            $table->float('amount')->after()将此字段放在其他字段后面（只能在MySQL中使用）
            $table->string('email')->nullable();表示此字段允许为NULL
            $table->string('email')->notNull();表示此字段不允许为NULL
            $table->string('email')->default($value);指定此字段的默认值
            $table->integer('number')->unsigned();表示整数为非负数

            索引方法表
            $table->primary('id');设置主键
            $table->primary(array('first','last'));设置复合主键
            $table->unique('email');设置唯一索引
            $table->index('');设置基本索引


        });
    }


2.种子文件
php artisan make:seeder AaaaTableSeeder     创建种子文件:
php artisan db:seed --class=AaaaTableSeeder 执行种子文件:
public function run()
    {
        //DB类和模型都可以添加数据
        DB::table('info')->insert([
            [
                'name'    => '司马无双',
                'age'     => 23,
                'sex'     => 1,
                'address' => '北京市朝阳区安立路101号名人公寓A座906',
                'email'   => '123456@qq.com',
                'mobile'  => 1381234567,
            ]
        ]);
    }

2.1使用工厂类批量添加数据方式一：
$faker = \Faker\Factory::create('zh_CN');
        for ($i = 1;$i <= 50;$i++){
            DB::table('info')->insert([
                [
                    'name'    => $faker->name,
                    'age'     => rand(20,30),
                    'sex'     => rand(0,1),
                    'address' => $faker->address,
                    'email'   => $faker->email,
                    'mobile'  => $faker->phoneNumber,
                ]
            ]);
        }
2.2使用工厂类批量添加数据方式二：
a.先创建模型的工厂类：php artisan make:factory InfoFactory
大致类容如下：
$factory->define(App\Http\Models\Info::class, function (Faker $faker) {
    return [
        'name'    => $faker->name,
        'age'     => rand(20,30),
        'sex'     => rand(0,1),
        'address' => $faker->address,
        'email'   => $faker->email,
        'mobile'  => $faker->phoneNumber,
    ];
});
b.修改种子文件如下：
 public function run()
    {
        //factory(\App\Models\User::class)->times(300)->create();

        // 生成6条数据集合，使用make函数的效率更高
        $infos = factory(Info::class)->times(6)->make();
        // 将数据集合转换为数组，并插入到数据库中
        Info::insert($infos->toArray());
    }

3.model模型

创建控制器:php artisan make:controller \**\**\AaaaController
创建模型:php artisan make:model Models/Admin/{模型名称}
添加deleted_at字段:alter table 表名 add deleted_at timestamp null
创建服务容器文件 php artisan make:provider ***ServiceProvider
namespace App\Http\Models;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;//引入软删除类
class Member extends Model
{
    use SoftDeletes;
    //指定软删除标记字段
    protected $dates=['deleted_at'];
    //指定表名,如果项目配置了前缀,这里的表面不需要前缀,如果不指定则使用模型类名的负数形式作为表名
    protected $table='member';
    //指定主键名称,如果主键名称是就是id,可以不指定
    protected $primaryKey='id';
    //定义$timestamps属性,值是false
    //如果不设置为false,则默认会操作表中的created_at和updated_at字段
    //有时候,表里面没有这两个字段所以会设置为false
    public $timestamps=false;
    //设置允许入库的字段
    protected $fillable=['name','password','age','email','logo'];
}

3.1发布依赖到配置文件
例：php artisan vendor:publish --provider="Dingo\Api\Provider\LaravelServiceProvider"

4.laravel中的关系使用:
Article文章表:id,title,comment_id(评论id)
Comment品论表:id,article_id,comment(评论内容)
两张表是1对多的关系(一篇文章有多个评论)

//文章表模型
class Article extends Model
{
    protected $table='article';
    protected $fillable=['title'];
    //与评论表一对多的联系
    public function comment()
    {
                          //关联模型     关联模型id  本模型id
    return $this->hasMany('App\Comment','article_id','id');
    }

    //此方法主要实现关联数据删除,删除主表数据时,自动删除关联数据表相关数据
    protected static function boot()
    {
        parent::boot();
        static::deleting(function($artice) {
            $artice->comment()->delete();
           //......可以有多个关联模型......
        });
    }
}
//评论表模型
class Comment extends Model
{
    protected $table='comment';
    protected $fillable=['article_id','comment'];
    //建立与article表
    public function article()
    {
                              //关联模型     关联模型id  本模型id
        return $this->hasOne('App\Article','id','article_id');
    }
}
//文章表控制器
class ArticleController extends Controller
{
    public function index()
    {
        //关联模型数据查询,查询文章表数据自动查询关联的品论数据
        $data1=Article::with('comment')->find(1);
       // echo '<pre>';
       // var_dump($data1);
        echo '文章名称：'.$data1->title."<br />";
        echo "<hr>";
        echo '评论类容:'."<br />";
        foreach ($data1->comment as $v){
            echo $v->comment."<br />";
        }
        //关联模型数据删除,删除文章表数据自动删除关联的品论表数据
        Article::destory($id);
    }
}


5.如果在laravel获取的数据模型中动态添加元素,获取数据时不能使用toArray();

6.连表查询实例1:
 $course_file_info=\DB::table('course')->join('lib_types','course.id','=','lib_types.course_build_id')
 ->join('course_liucheng','lib_types.id','=','course_liucheng.lib_type_id')
->join('course_files','course_liucheng.id','=','course_files.course_liucheng_id')
->join('course_file_page','course_files.id','=','course_file_page.course_file_id')
->where('course.id',$id)
->get();
//实例2
  $result=\DB::table('shicao_arrangement')->join('shicao_set','shicao_arrangement.shicao_set_id','=','shicao_set.id')
            ->where('shicao_arrangement.org_id',$request->get('org_id'))
            ->where('shicao_arrangement.class_id',$request->get('class_id'))
            ->where('shicao_set.name','like','%'.$request->get('name').'%')
            ->select('shicao_arrangement.*','shicao_set.name','shicao_set.course_id')
            ->orderBy('shicao_arrangement.id','desc')
            ->paginate(15);


7.实训项目中的自定义函数使用:(如果是get请求,路由要放在最上面防止被覆盖)
Repository中,例:
//    public function index($class_id,$course_id)//多个参数
    public function index($request)
    {
//        $result=\DB::table('course_arrangement')->where('class_id',$class_id)->paginate(15);
        $result=\DB::table('course_arrangement')->where('class_id',$request->get('class_id'))->paginate(15);
           foreach ($result as $v){
                $v->teacher_name=\DB::table('teacher')->where('id',$v->created_userid)->get(['teacher_name']);//上课教师
//                $v->course_name=\DB::table('course')->where('id',$course_id)->get(['course_name']);//课程名字
                $v->course_name=\DB::table('course')->where('id',$request->get('course_id'))->get(['course_name']);//课程名字
           }
        return $result ?: $this->errorNotFound();
    }
控制器中调用:
public function index(Request $request)
    {
//        return $this->stu->index($request->class_id,$request->course_id);//多个参数
        return $this->stu->index($request);
    }    


8.验证的单独修改
    //修改
    public function renew($request, $id)
    {
        $data=$request->all();
        $rules=['name' => 'unique:course_arrangement,name,'.$request->id];
        $message=['name.unique'=>'名称不能重复'];
        $validator = \Validator::make($data,$rules,$message);
        if($validator->passes()){
            
                    $result=$this->update([
                        'name'                      => $request->name,
                        'begin_time'=> date('Y-m-d H:i:s',$request->begin_time),
                        'end_time'=> date('Y-m-d H:i:s',$request->end_time),
                        'created_at'       => Carbon::now(),
                        'updated_at'       => Carbon::now(),
                    ],$id);
            

            return $this->respondWith(['updated' => !!$result]);
        }else{
            $error = collect($validator->messages())->implode('0', ',');
            return $this->errorUnprocessableEntity($error);//422
        }
    }



7.运行一个通用语句
DB::statement,有些数据库语句不返回任何值，
如果需要返回值,可以执行DB::select('')

8.
取出的json格式转为纯字符串
json_encode($value,JSON_UNESCAPED_UNICODE)
转为纯数组
json_decode($content, true)

9.laravel中如果不想让某个字段显示在插叙及结果中,可以在Model模型中设置
例:protected $hidden=['password'];
该设置对模型查询有效,对DB类查询无效

10.laravel中验证使用正则表达式的时候,$rules要使用数组形式,不能用管道模式.
例如:'mg_pwd'=> [ 'required','string','between:6,20','regex:/^[a-zA-Z0-9_]+$/',],

11.remember_token 保存用户登录状态,(5年),时间长,显然不安全
需要传递一个字段('online':自定义)记录登录状态,值为1即可
 $res = Auth::guard('a')->attempt($request->only(['username','password']),$request->has('online'));


12.获取请求路径
// 返回当前页面的完整路径url: http://xx.com/aa/bb
Request::url();
$request->url()
// 路径: /aa/bb
Request::path();
$request->path();
// 获取请求 Uri: /aa/bb/?c=d
Request::getRequestUri();
$request->getRequestUri();
// 获取 Uri: http://xx.com/aa/bb/?c=d
Request::getUri();
$request->getUri();


13.查看SQL语句执行记录
DB::connection()->enableQueryLog();//开启sql语句日志记录
Lesson::where("id",'>',5)->where('course_id',2)->get();
$query = DB::getQueryLog();
print_r($query);

14.获取数据表随机数据
一、使用原生SQL从数据库获取数据从Mysql官网可以看到，可以让ORDER BY RAND()和LIMIT一起使用，可以用于从多行结果中选取随机的一部分。 
SELECT * FROM table WHERE name="" ORDER BY RAND() LIMIT 100; 
那么在laravel中使用原生SQL也很简单，如下所示： 
$info = DB::select('SELECT * FROM table WHERE name="" ORDER BY RAND() LIMIT 100'); 

原生SQL+预处理：
$info = \DB::select('SELECT * FROM it_info WHERE sex=:sex and age=:age ORDER BY RAND() LIMIT 2',['sex'=>1,'age'=>23]);
$info = \DB::select('SELECT * FROM it_info WHERE sex=? and age=? ORDER BY RAND() LIMIT 2',[1,23]);

二、使用原始表达式从数据随机获取数据
我们都知道laravel的原始表达式，我们可以使用DB::raw('RAND()')从数据库随机获取数据。
同时你还可以使用orderByRaw('RAND()')从数据库随机获取数据，和DB::raw('RAND()')效果一样
$info=\DB::table('users')
        ->orderBy(DB::raw('RAND()')) 
        ->take(5) 
        ->get(); 
三、使用laravel的inRandomOrder方法随机获取数据
laravel中使inRandomOrder会对数据结果进行随机排序，达到我们随机从数据库获取数据的效果：
$info = \DB::table('users') 
            ->inRandomOrder() 
            ->take(5) 
            ->get(); 
上面三种对于小数据没有问题，对于大数据，性能就不行了
最高效的查询方法
$data =Xiaoke::when($live,function ($query){ 
            $query->join( 
                DB::raw("(SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `xiaokes`)-(SELECT MIN(id) FROM `xiaokes`))+(SELECT MIN(id) FROM `xiaokes`)) AS xid) as t2"), 
                'xiaokes.id', '>=', 't2.xid' 
            ); 
        }); 
           ->take(3)->get(); 


15.laravel队列

15.1：可以用以下的 Artisan 命令来生成一个新的队列任务：
php artisan make:job SendReminderEmail(队列名称)
    生成的类实现了 Illuminate\Contracts\Queue\ShouldQueue 接口，这意味着这个任务将会被推送到队列中，而不是同步执行

15.2：运行队列任务
php artisan queue:work
    Laravel 包含一个队列处理器，当新任务被推到队列中时它能处理这些任务。你可以通过 queue:work 命令来运行处理器。
    要注意，一旦 queue:work 命令开始，它将一直运行，直到你手动停止或者你关闭控制台：
    你应该使用进程监控工具，比如 Supervisor 来保证队列处理器没有停止运行。
php artisan queue:work --queue=high,default
    有些应用可能不需要把任务发到不同的队列，而只发到一个简单的队列中就行了。但是把任务推到不同的队列仍然是非常有用的，
    因为 Laravel 队列处理器允许你定义队列的优先级，所以你能给不同的队列划分不同的优先级或者区分不同任务的不同处理方式了
    。比如说，如果你把任务推到 high 队列中，你就能让队列处理器优先处理这些任务了：
    
PS:
    一定要记得，队列处理器是长时间运行的进程，并在内存里保存着已经启动的应用状态。这样的结果就是，
    处理器运行后如果你修改代码那这些改变是不会应用到处理器中的。所以在你重新部署过程中，一定要 重启队列处理器 。
    php artisan queue:restart



16.laravel自带auth认证
验证用户名密码
    $result =  Auth::attempt($userinfo,$request->has('online')); 
    
验证用户名密码后，获取验证用户
    if($result){
        Auth::user();---获取验证用户信息
        Auth::id();  ---获取验证用户ID
    }

检查用户是否登录check 方法来
    if($result){
        return  response()->json(Auth::check());
    }

要退出应用，可以使用 Auth 门面的 logout 方法，这将会清除用户 Session 中的认证信息：
     Auth::logout();

在API的使用中，如果使用passport来做token认证，可以先借助laravel本身的auth类进行用户名密码的验证--获取验证用户---检查用户是否登录




17 laravel项目使用predis和PHP原生redis扩展冲突问题
在使用laravel的 开源论坛中遇到这么一个问题：
Non-static method Redis::hSet() cannot be called statically。
问题原因在于 使用在Laravel中使用Redis时,都很喜欢用门面的形式 这导致冲突发生。
例如：$redis = Redis::get('xxxx');
可能php安装勒redis扩展 而laravel又安装勒predis第三方包 导致系统不知如何寻找发生冲突

解决：
1. 所有的Redis使用完整的命名空间路径 如
// $redis = Illuminate\Support\Facades\Redis::Redis::get('xxxx');

2. 关闭php的redis扩展
<!-- 在/etc/php.d/redis.ini和php-zts.d/redis.ini中找到 -->
extension=redis.so注释掉



18.laravel 中的 toSql 获取带参数的 sql 语句
默认情况下，toSql 获取到的 sql 里面的参数使用 "?" 代替的，如下：
DB::table('user')->where('id', 1)->toSql();
获取到的 sql 语句是：
select * from `tb_user` where `id` = ?

有时候我们想要得到具体的语句，可以利用 builder 的 getBindings 方法：
$builder = DB::table('user')->where('id', 1);
$bindings = $builder->getBindings();
$sql = str_replace('?', '%s', $builder->toSql());
$sql = sprintf($sql, ...$bindings);
dd($sql);

19.laravel中执行原生SQL的实例
$wechat_exam = \DB::table('exam_arrangement')->join('exam_class', 'exam_arrangement.id', '=', 'exam_class.exam_arrangement_id')
            ->whereIn('exam_arrangement.id', $exam_arrangement_ids)
            ->whereRaw('(exam_arrangement.mode in(2,3) or exam_arrangement.mode is null)')
            ->select('exam_arrangement.*', 'exam_class.begin_time', 'exam_class.end_time')
            ->paginate(10);


19.laravel中多级数据表关联关系数据获取。
                                       一级关系名称                  二级关系名称
$result = Choose_ShiXun_Set::with('choose_shixun_set_points.Choose_ShiXun_Set_Point_Connect')->find($id);



20.larave项目中配置数据库读写分离
建议负责读写的数据库用户名和密码设为一致
.env文件：
DB_CONNECTION=mysql
DB_HOST_READ_ONE=192.168.255.132//读1
DB_HOST_READ_TWO=192.168.255.130//读2
DB_HOST_WRITE=192.168.255.131//写
DB_PORT=3306
DB_DATABASE=xietong_yuanxiao
DB_USERNAME=root
DB_PASSWORD=123456

database.php配置文件中mysql配置部分：
'mysql' => [
            'driver' => 'mysql',
            #'host' => env('DB_HOST', '127.0.0.1'),
            'read'   =>['host'=>[env('DB_HOST_READ_ONE'),env('DB_HOST_READ_TWO')]],
            'write'  =>['host'=>env('DB_HOST_WRITE')],
            'port' => env('DB_PORT', '3306'),
            //'unix_socket' => '/Applications/MAMP/tmp/mysql/mysql.sock',
            'database' => env('DB_DATABASE'),
            'username' => env('DB_USERNAME'),
            'password' => env('DB_PASSWORD'),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
            'prefix' => '',
            'strict' => false,
            'engine' => null,
        ],

21.在 laravel 里面报错（该错误多出现在windows环境下）
cURL error 60: SSL certificate problem: unable to get local issuer certificate
解决办法：
1） 下载下载pem文件，网址：http://curl.haxx.se/ca/cacert.pem
2） 并将文件拷贝到D:\phpStudy\PHPTutorial\cacert.pem
3）在php.ini  增加 curl.cainfo = "D:\phpStudy\PHPTutorial\cacert.pem"
4）成功


22.随机字符串
(string)Str::uuid();
(string)Str::orderedUuid();

23.集合简单实用示例：
 $collection = collect([
            'taylor',
            'abigail',
            null
        ])->map(function ($name) {
            return strtoupper($name);
        })
            ->reject(function ($name) {
                return empty($name);
            });
        var_dump($collection);
        return $collection;

24. 临时修改配置文件中的数据(以下两种方法都可以)
    \Config::set('test.weixin', 'new_account');
    config(['test.weixin'=>'new_account']);
    获取config配置数据
    return config('test');

25.Laravel中使用Session进行session存储的时候，必须执行Session::save();
参考网址：(http://www.manongjc.com/article/98888.html)

储一个变量:Session::put('key', 'value');
获取一个变量:Session::get('key');
获取一个变量或返回一个默认值
$value = Session::get('key', 'default');
$value = Session::get('key', function() { return 'default'; });
获取所有变量:Session::all();
检查一个变量是否在 Session 中存在
if (Session::has('users'))
{
    //
}
删除一个变量:Session::forget('key');
删除所有变量:Session::flush();


26.Laravel中使用Cache门面的使用：
设置：
Cache('key','value','time');
Cache 门面的 get 方法用于从缓存中获取缓存项，如果缓存项不存在，返回 null。
如果需要的话你可以传递第二个参数到 get 方法指定缓存项不存在时返回的自定义默认值：
$value = Cache::get('key');
$value = Cache::get('key', 'default');

可以传递一个闭包作为默认值，如果缓存项不存在的话闭包的结果将会被返回。
传递闭包允许你可以从数据库或其它外部服务获取默认值：
$value = Cache::get('key', function() {
    return DB::table(...)->get();
});


检查缓存项是否存在
has 方法用于判断缓存项是否存在：
if (Cache::has('key')) {
    //
}

删除缓存：
$value = Cache::pull('key'); 从缓存中获取缓存项然后删除，如果缓存项不存在的话返回null
Cache::forget('key'); 使用forget 方法从缓存中移除缓存项数据
Cache::flush();使用 flush 方法清除所有缓存：

increment 和 decrement 方法可用于调整缓存中的整型数值。这两个方法都可以接收第二个参数来指明缓存项数值增加和减少的数目：
Cache::increment('key');
Cache::increment('key', $amount);
Cache::decrement('key');
Cache::decrement('key', $amount);

有时候你可能想要获取缓存项，但如果请求的缓存项不存在时给它存储一个默认值。
例如，你可能想要从缓存中获取所有用户，或者如果它们不存在的话，从数据库获取它们并将其添加到缓存中，你可以通过使用 Cache::remember 方法实现：

$value = Cache::remember('users', $minutes, function() {
    return DB::table('users')->get();
});
如果缓存项不存在，传递给 remember 方法的闭包被执行并且将结果存放到缓存中。

还可以联合 remember 和 forever 方法：
$value = Cache::rememberForever('users', function() {
    return DB::table('users')->get();
});


27.laravel项目中执行php artisan storage:link 注意事项
该命令会在项目根目录下的public目录下生成名为storage的文件，该文件是storage/app/public目录的软链接
示例：域名为http://webchat.php68.com
http://webchat.php68.com/storage/a.png 实际上指向的是storage/app/public/a.png


28.对获取的分页数据加入的新增字段进行排序
示例：

    public function check_stu($request)
    {
        $students = \DB::table('stu')->where('class_id', $request->class_id)->paginate();

        if ($students) {
            foreach ($students as $key => $value) {
                $has_shixun_arrangement_answer = \DB::table('shixun_arrangement_answer')->where('student_id',$value->id)->first();
                if ($has_shixun_arrangement_answer) {
                    $value->shixun_status = 1;
                } else {
                    $value->shixun_status = 0;
                }
            }
        }
        //转化为几何数据
        $data =  collect($students)->toArray();
        $data['data'] = $this->res_sort($data['data'],'SORT_DESC','shixun_status');
        return $data;
    }


    /**
     * 二维数组字段排序
     * @param $data '要排序的数组'
     * @param $sort_type '排序规则'
     * @param $field  '排序字段'
     * @return mixed
     */
    public function res_sort($data,$sort_type,$field) {
        $sort = array(
            'direction' => $sort_type,
            'field'     => $field,
        );
        $arrSort = array();
        foreach($data AS $uniqid => $row){
            foreach($row AS $key=>$value){
                $arrSort[$key][$uniqid] = $value;
            }
        }

        if($sort['direction']){
            array_multisort($arrSort[$sort['field']], constant($sort['direction']), $data);
        }
        return $data;
    }

29.传递参数如果是一维数组JSON传递
[1,2] 或者 ["aaa","bbb"]

30.集合获取关联数据的一种方法示例：
public function index()
{
    $articles = $this->model->where('is_hidden',0)->orderByDesc('created_at')->paginate(30)->toArray();
    // 格式化数据
    $data = collect($articles['data'])
        ->map(function ($item) {
            return $this->with('users')->find($item['id']);
        });
    return $articles;
}

31.::class
字php5.5起，关键字class也可以用于类名的解析，使用ClassName::class你可以获取一个字符串，
包含了ClassName的完全限定名称，这对使用了命名空间的类尤为重要。
示例：在模型关系中以下两种方式等同
public function choose_shixun_set_points()
{
    return $this->hasMany(Choose_ShiXun_Set_Point::class, 'choose_shixun_set_id', 'id');
}

public function choose_shixun_set_pointss()
{
    return $this->hasMany('App\Http\Frontend\Models\Choose_ShiXun_Set_Point', 'choose_shixun_set_id', 'id');
}


32.查询构造器使用的一个Demo
$Lib_Knowpoint_unions = $this->model->where('org_id', $org_id)
                ->when($lib_type_id, function ($query) use ($lib_type_id) {
                    return $query->where('lib_type_id', $lib_type_id);
                })->where(function ($query) use ($lib_point_id, $lib_point_property_id, $lib_point_property_value) {
                    if ($lib_point_id && $lib_point_property_id && $lib_point_property_value) {
                        $query->where(function ($query) use ($lib_point_id, $lib_point_property_id, $lib_point_property_value) {
                            $query->where([
                                'primary_point_id'          => $lib_point_id,
                                'primary_point_perporty_id' => $lib_point_property_id,
                            ])->where('primary_point_perporty_value', 'like', '%' . $lib_point_property_value . '%');
                        })->Orwhere(function ($query) use ($lib_point_id, $lib_point_property_id, $lib_point_property_value) {
                            $query->where([
                                'relevance_point_id'          => $lib_point_id,
                                'relevance_point_property_id' => $lib_point_property_id,
                            ])->where('relevance_point_property_value', 'like', '%' . $lib_point_property_value . '%');
                        });
                    } else if ($lib_point_id && $lib_point_property_id) {
                        $query->where([
                            'primary_point_id'          => $lib_point_id,
                            'primary_point_perporty_id' => $lib_point_property_id
                        ])->Orwhere([
                            'relevance_point_id'          => $lib_point_id,
                            'relevance_point_property_id' => $lib_point_property_id
                        ]);
                    } else if ($lib_point_id) {
                        $query->where('primary_point_id', $lib_point_id)->Orwhere('relevance_point_id', $lib_point_id);
                    }
                })->paginate(15);


33.执行迁移文件时报错: Syntax error or access violation: 1071 Specified key was too long; max key length is ***
在app/Providers/AppServiceProvider.php中修改boot方法：
public function boot()
{
    //添加如下内容
  \Schema::defaultStringLength(191);
}

34.mysql的substring函数
从字符串的第 4 个字符位置（倒数）开始取，只取 2 个字符。
select substring('example.com', -4, 2);
+----------------------------------+
| substring('example.com', -4, 2) |
+----------------------------------+
| .c                               |
+----------------------------------+

 
 35.拉人按vel模型中映入attr函数
 /**
 * 返回数据转化为数组格式
 */
public function attr(){
    return $this->attributes;
}

控制器中调用：
public function demo(){
    $category = Category::find(1);
    // return (gettype($category));//对象

    $category_info = $category->attr();
    return (gettype($category_info));//数组
}

36.
// 合并输入，如果有相同的key，用户输入的值会被替换掉，否则追加到 input
$request->merge(['foo' => 'bar', ....]);

// 替换所有输入
$request->replace([..])

// 设置某参数，如果存在则替换，否则新增
$request['foo'] = 'bar';

// 移除某参数
unset($request['foo'])
------------------------------------------------------------------------------------------------------
laravel6.0 新特性
1.laravel 6.0 artisan命令移除了make:auth命令，取而代之的是一个功能包laravel/ui，
首先我们安装 ：composer require laravel/ui
然后输入 php artisan ui vue --auth 即可。
当然我们也可以使用 php artisan ui react --auth 或者 php artisan ui bootstrap --auth 来设置默认的文件。
其中的区别仅仅是示例 JS 使用 VUE 还是 REACT。
认证生成的模版则和以前一致。


















