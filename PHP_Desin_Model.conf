<?php
//---1---.设计模式之工厂模式
/*工厂，即提供原材料，可以（批量）生产成品的地方。
工厂模式，即创建一个工厂类，具体的说是工厂类中有一个方法，为这个方法提供类名（原材料），就可以得到该
类的对象（成品）。
工厂模式一般适用于对象有共同的属性或者方法的场合。举例说明：*/
class A {
//A类中有aa方法
    public function aa(){
        echo 'aa';
    }
}
class B {
//B类中也有aa方法
    public function aa(){
        echo 'bb';
    }
}
//工厂类
class Factory {
//静态方法，用于生产对象，参数为类名
    public static function getInstance($clas_name){
        return new $clas_name();
    }
}
//
$obj = Factory::getInstance('A');
//$obj = Factory::getInstance('B');
$obj->aa();
/*从上述代码中看出，有工厂类的好处是，简化调用。无论A类的对象，还是B类的对象，都叫做 $obj ，而且都有
aa() 方法，所以调用方法 aa() 这行代码永远不需要变化，需要调用A类的方法，就为工厂类提供类名A，需要调用B
类的方法，就为工厂类提供类名B。*/

//************************************************************************************************************************************

//---2---.设计模式之单例模式
/*举例说明，有一个类，希望只能够得到该类的唯一一个对象，代码如何实现？如果解决了这个问题，那么你的代码
就可以叫做设计模式了，设计模式的概念就是如此。
什么叫做得到该类的唯一一个对象呢？即无论通过什么方法，只要能够得到该类的对象而不报错，并且打印这些对
象的时候必须是相同的结果（对象编号相同）*/
//例如：
class MySql{
    private static $instance=null;
    //私有构造方法-不允许实例化
    private function __construct()
    {
    }
    //是有克隆方法-不允许克隆
    private function __clone()
    {
        // TODO: Implement __clone() method.
    }

    public static function getInstance()
    {
        if(self::$instance===null  ){
            self::$instance=new self();
        }
        return self::$instance;
    }
}
$m1 = Mysql::getInstance();
$m2 = Mysql::getInstance();
echo "<pre>";
var_dump($m1);
var_dump($m2);

//************************************************************************************************************************************
//---3---.设计模式之观察者模式
