<?php

list函数的使用：1(给变量赋值)
$my_array = ["Dog","Cat","Horse"];
list($a, $b, $c) = $my_array;
echo $a."<br />";//Dog
echo $b."<br />";//Cat
echo $c."<br />";//Horse

list函数的使用：2(交换变量)
$a=666;
$b=888;
list($b,$a)=[$a,$b];


eval函数的使用
eval() 函数把字符串按照 PHP 代码来计算。
该字符串必须是合法的 PHP 代码，且必须以分号结尾。

$string = "beautiful";
$time = "winter";
 
$str = 'This is a $string $time morning!';
echo $str. PHP_EOL;
// This is a $string $time morning!
 
eval("\$str = \"$str\";");
echo $str;
// This is a beautiful winter morning!



//判断文件夹是否存在不存在则创建
function mkdirs($dir, $mode = 0777)
{
    if (is_dir($dir) || @mkdir($dir, $mode)) return TRUE;
    if (!mkdirs(dirname($dir), $mode)) return FALSE;
    return @mkdir($dir, $mode);
}



//获取CPU序列号
function getCpuId(){
    $uuid = '';
    exec("wmic CPU get ProcessorID", $result);
    $uuid = $result[1];
    return $uuid;
}

//获取硬盘序列号
function getDiskId(){
    $uuid = '';
    $bat = dirname(__FILE__) . '/'. time() . rand(11111,99999) . rand(11111,99999) . '.bat';
    file_put_contents($bat, "select disk 0 \n detail disk");
    exec("diskpart /s " . realpath($bat) , $result);
    unlink($bat);
    foreach ($result as $key => $value) {
        if (strpos($value, 'ID:')!==false) {
            $uuid = trim(substr($value, (strpos($value, 'ID:') + 3)));
        }
    }
    return $uuid;
}

// 将目标转化为 collection 对象
if (!function_exists('collection')) {
    function collection($target)
    {
        // 如果目标已为 collection 对象,则直接返回
        if ($target instanceof \Illuminate\Support\Collection) {
            return $target;
        }
        // 否则将目标实例化为 collection 对象返回
        return collect($target);
    }
}

//秒转年、天、小时、分、秒）
function Sec2Time($time){
    if(is_numeric($time)){
    $value = array(
      "years" => 0, "days" => 0, "hours" => 0,
      "minutes" => 0, "seconds" => 0,
    );
    if($time >= 31556926){
      $value["years"] = floor($time/31556926);
      $time = ($time%31556926);
    }
    if($time >= 86400){
      $value["days"] = floor($time/86400);
      $time = ($time%86400);
    }
    if($time >= 3600){
      $value["hours"] = floor($time/3600);
      $time = ($time%3600);
    }
    if($time >= 60){
      $value["minutes"] = floor($time/60);
      $time = ($time%60);
    }
    $value["seconds"] = floor($time);
    //return (array) $value;
    //$t=$value["years"] ."年". $value["days"] ."天"." ". $value["hours"] ."小时". $value["minutes"] ."分".$value["seconds"]."秒";
    $t=$value["hours"] ."小时". $value["minutes"] ."分".$value["seconds"]."秒";
    Return $t;
    
     }else{
    return (bool) FALSE;
    }
 }


 //图片转base64
function base64EncodeImage($image_file)
{
    $base64_image = '';
    $image_info = getimagesize($image_file);
    $image_data = fread(fopen($image_file, 'r'), filesize($image_file));
    $base64_image = 'data:' . $image_info['mime'] . ';base64,' . chunk_split(base64_encode($image_data));
    /* $result=[
         'image_content'=>$base64_image,
     ];
     echo response()->json($result);*/
    echo $base64_image;
    die();
}


/**
 * [http_post curl-post请求]
 * @param  [type] $url    [请求的服务器脚本]
 * @param  [type] $result [是一个数组]
 * @return [type]         [description]
 */
function http_post($url, $data = '')
{
    //初始化
    $ch = curl_init();
    // 设置请求url地址
    curl_setopt($ch, CURLOPT_URL, $url);
    //去除响应头和行
    //curl_setopt($ch, CURLOPT_HEADER, 0);
    //不直接输出结果
    //curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    //超时时间 单位：秒
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);
    //不检查ssl证书
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    if ($data) {
        //发起post请求
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    }
    $res = curl_exec($ch);
    curl_close($ch);
    // 返回值
    return $res;
}

/**
 * [http_post curl-get请求]
 * @param  [type] $url    [请求的服务器地址]
 * @return [type]         [description]
 */
function http_get($url)
{
    //初始化
    $ch = curl_init();
    // 设置请求url地址
    curl_setopt($ch, CURLOPT_URL, $url);
    //去除响应头和行
    curl_setopt($ch, CURLOPT_HEADER, 0);
    //不直接输出结果
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    //超时时间 单位：秒
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);
    //不检查ssl证书
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);

    $data = curl_exec($ch);
    curl_close($ch);
    // 返回值
    return $data;
}


////组织树形结构---该方法需要给 传递的二维数组 添加索引，索引是一维数组元素的id
function generateTree($items)
{
    $tree = [];
    foreach ($items as $item) {
        if (isset($items[$item['parent_id']])) {
            $items[$item['parent_id']]['son'][] =& $items[$item['id']];
            // $items[$item['parent_id']][$item['id']][] =& $items[$item['id']];
        } else {
            $tree[] =& $items[$item['id']];
        }
    }
    return $tree;
}

//获取所有子孙
function subtree($arr, $id, $level = 1)
{
    $subs = [];//子孙数组
    foreach ($arr as $v) {
        if ($v['parent_id'] == $id) {
            $v['level'] = $level;
            $subs[] = $v;
            $subs = array_merge($subs, subtree($arr, $v['id'], $level + 1));
        }
    }
    return $subs;
}



/**
 * [arraySort 二维数组按照某个字段排序]
 * @param  [type] $array [待排序数组]
 * @param  [type] $keys  [待排序字段]
 * @param  [type] $sort  [排序规则]
 * @return [type]        [description]
 */
public function arraySort($array, $keys, $sort = SORT_DESC)
{
    $keysValue = [];
    foreach ($array as $k => $v) {
        $keysValue[$k] = $v[$keys];
    }
    array_multisort($keysValue, $sort, $array);
    return $array;
}

//****************************************************
//一下4个函数字啊一块使用
//去掉数字段前面的0 @2020-04-08
public function del0($num)
{
    return "" . intval($num);
}

//单个数字变汉字 @2020-04-08
public function n2c($x)
{
    $arr_n = [
        "零",
        "一",
        "二",
        "三",
        "四",
        "五",
        "六",
        "七",
        "八",
        "九",
        "十"
    ];
    return $arr_n[$x];
}

//读取数值（4位） @2020-04-08
public function num_r($abcd)
{
    $arr = [];
    $str = ""; //读取后的汉字数值
    $flag = 0; //该位是否为零
    $flag_end = 1; //是否以“零”结尾
    $size_r = strlen($abcd);
    for ($i = 0; $i < $size_r; $i++) {
        $arr[$i] = $abcd{$i};
    }
    $arrlen = count($arr);
    for ($j = 0; $j < $arrlen; $j++) {
        $ch = $this->n2c($arr[$arrlen - 1 - $j]); //从后向前转汉字
        //echo $ch;
        //echo "";
        if ($ch == "零" && $flag == 0) { //如果是第一个零
            $flag = 1; //该位为零
            $str = $ch . $str; //加入汉字数值字符串
            continue;
        } else if ($ch == "零") { //如果不是第一个零了
            continue;
        }
        $flag = 0; //该位不是零
        switch ($j) {
            case 0:
                $str = $ch;
                $flag_end = 0;
                break; //第一位（末尾），没有以“零”结尾
            case 1:
                $str = $ch . "十" . $str;
                break; //第二位
            case 2:
                $str = $ch . "百" . $str;
                break; //第三位
            case 3:
                $str = $ch . "千" . $str;
                break; //第四位
        }
    }
    if ($flag_end == 1) //如果以“零”结尾
    {
        mb_internal_encoding("UTF-8");
        $str = mb_substr($str, 0, mb_strlen($str) - 1); //把“零”去掉
    }
    return $str;
}

//整体读取转换 @2020-04-08
function num2ch($num)
{
    $num_real = $this->del0($num);//去掉前面的“0”
    $numlen = strlen($num_real);
    //echo "numlen=" . $numlen . "";
    if ($numlen >= 9)//如果满九位，读取“亿”位
    {
        $y = substr($num_real, -9, 1);
        $wsbq = substr($num_real, -8, 4);
        $gsbq = substr($num_real, -4);
        $a = $this->num_r($this->del0($gsbq));
        $b = $this->num_r($this->del0($wsbq)) . "万";
        $c = $this->num_r($this->del0($y)) . "亿";
    } else if ($numlen <= 8 && $numlen >= 5) //如果大于等于“万”
    {
        $wsbq = substr($num_real, 0, $numlen - 4);
        $gsbq = substr($num_real, -4);
        $a = $this->num_r($this->del0($gsbq));
        $b = $this->num_r($this->del0($wsbq)) . "万";
        $c = "";
    } else if ($numlen <= 4) //如果小于等于“千”
    {
        $gsbq = substr($num_real, -$numlen);
        $a = $this->num_r($this->del0($gsbq));
        $b = "";
        $c = "";
    }
    $ch_num = $c . $b . $a;
    return $ch_num;
}
//****************************************************
