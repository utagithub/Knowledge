<?php
--------------------------------------------------
docker容器通过/bin/bash无法进入时,可以先选择/bin/sh 执行以下命令安装相关命令,然后根据需要使用(找不到的软件包可以考虑跟换镜像源)
apk update
apk add 「bash wget curl git make vim docker」
--------------------------------------------------


1.安装   yum -y install docker-io

2.docker服务管理
systemctl start docker   
systemctl stop docker   
systemctl restart docker   

3.docker version 查看版本

4.镜像管理
	
	4.1.查看镜像(docker images 查看所有镜像)
	docker images [镜像名称]
	常用参数
	-a 列出本地所有的镜像
	-q 只显示镜像ID


	4.2.搜索镜像
	docker search xxx要搜索的镜像关键词


	4.3.从仓库拉取镜像
	docker pull 要拉取的镜像名


	4.4.删除镜像
	删除单个 docker rmi -f 镜像ID
	删除多个 docker rmi –f 镜像1ID   镜像2ID   以空格隔开
	删除全部 docker rmi –f `docker images –qa`
	# 参数
	-f 强制删除 可选


5.容器管理
5.1.新建并启动容器
docker run [options] imageID [command] [args]
	# options说明
	--name=”容器新名称”    为容器指定一个名称
	-d 后台运行容器，并返回容器ID，也即启动守护式容器,但是如果容器前台没有进程运行，只是纯后台运行，则docker容器运行完毕就关闭
	-i 以交互模式运行容器，通常与-t 同时使用
	-t 为容器重新分配一个输入伪终端，通常与 –i 同时使用
	-P 随机端口映射
	-p [ip:]宿主机端口:容器端口 指定端口映射
	-w 运行 docker 容器时，有时候我们希望它默认进入一个工作目录，我们可以在 docker run 命令后追加参数 -w 来实现，这样我们就不需要在启动 docker 容器后再进行一次 cd 命令了。
	-rm 选项表示退出容器时会自动将其删除。

例：
docker run –it --name myubuntu001 imageID


5.2.退出容器的方式有两种
	exit 命令 容器停止退出
	ctrl+p+q 容器不停止退出   推荐


5.3.列出容器
docker ps [options]
	# options说明
	不带任何参数，表示正在运行的容器
	-a 列出当前所有正在运行的容器 + 历史上运行过的
	-q 静默模式，只显示容器编号

5.4.重启容器
docker restart 容器ID

5.5.停止应用容器
docker stop 容器Id

5.6.强制停止应用容器
docker kill 容器Id

5.7.启动已停止的容器
docker start 容器Id

5.8.查看容器内运行的进程
docker inspect 容器ID/容器名

5.9.进入正在运行的容器
docker exec –it 容器id或容器名称 <bashShell> 默认后台写 /bin/bash
	-i :以交互的模式打开
	-t :分配一个伪终端
	docker exec –it 容器id /bin/bash
	进入容器然后执行命令:
	docker exec es8-es802-1 rm -rf /usr/share/elasticsearch/plugins/elasticsearch-analysis-ik-8.7.0

5.10.从容器拷贝文件到宿主机上
docker cp 容器ID:容器内路径 宿主机目录路径
docker cp xxxx:/tmp/abc.log /tmp/

5.11.删除已停止的容器
删除单个 docker rm -f 容器ID
删除全部 docker rm –f `docker ps –qa`

--------------------------------------------------

以root权限进入容器          镜像ID
docker exec -ti -u root c51f3f5acf2b bash

查看容器IP                                                  镜像ID
docker inspect --format='{{.NetworkSettings.IPAddress}}' 851c16bec25f

****************************************************************************************************************************************************************

从容器构建镜像
docker commit -a="wang" -m="nginx_for_k8s" 容器名称 镜像名称
-a ：提交的镜像作者；
-c ：使用 Dockerfile 指令来创建镜像；
-m ：提交时的说明文字；
-p ：在 commit 时，将容器暂停。

nginx:
docker run -d --name nginx11 	registry.cn-hangzhou.aliyuncs.com/u_ta/nginx_for_k8s:1.0
docker commit -a="u_ta" -m="nginx_for_k8s" 4f141e8fef6df635c72c2397f6ece64476aad45838aa56d0026ccf1c7e81f6b4 nginx_for_k8s:1.0
docker login --username=mrwangcsdn@163.com registry.cn-hangzhou.aliyuncs.com

docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/u_ta/nginx_for_k8s:[镜像版本号]
   docker tag sha256:b831dac5bb2aeab4a71a480dfce7c23d30f5d6ab7c876455c9c6cb44a7253fa8 registry.cn-hangzhou.aliyuncs.com/u_ta/nginx_for_k8s:1.0

docker push registry.cn-hangzhou.aliyuncs.com/u_ta/nginx_for_k8s:1.0

--------------------------------------------
docker run -d --name php 	registry.cn-hangzhou.aliyuncs.com/u_ta/php_for_k8s:1.0
php:
docker commit -a="u_ta" -m="php_for_k8s" 7ad826e57296c0d54cb52627b7f2ec03de0b0a87135bb847c04a236b1bbee685 php_for_k8s:1.0
docker login --username=mrwangcsdn@163.com registry.cn-hangzhou.aliyuncs.com

docker tag sha256:ad62c217cade431fad9ea67f936532fb75c879b599f282082feed19a26fe1727 registry.cn-hangzhou.aliyuncs.com/u_ta/php_for_k8s:1.0

docker push registry.cn-hangzhou.aliyuncs.com/u_ta/php_for_k8s:1.0

8fe557306dcdbe1aa055f78acb64627ee2fe163f88f32df93ea1cf8c8aee0066
--------------------------------------------
java:
docker commit -a="u_ta" -m="java_for_k8s" 52984a0e2baf4c1598fff772f9a3d456861486d3d6ec4516109400bdb63a7878 java_for_k8s:2.0

docker login --username=mrwangcsdn@163.com registry.cn-hangzhou.aliyuncs.com
docker tag sha256:0b0e4a5ef740de77ac14dbca050a6727bf08fd042cb9d77da6714dadd8a57318 registry.cn-hangzhou.aliyuncs.com/u_ta/java_for_k8s:2.0
docker push registry.cn-hangzhou.aliyuncs.com/u_ta/java_for_k8s:2.0


****************************************************************************************************************************************************************

kubectl get pod -A|grep Evicted


kubectl get pods -n <namespace> | grep -i evicted | awk '{if ($1!="NAME")print $1}'   | xargs  -n 1 kubectl delete pods -n <namespace> --force --grace-period=0

kubectl get pods -n php | grep -i evicted | awk '{if ($1!="NAME")print $1}'   | xargs  -n 1 kubectl delete pods -n php --force --grace-period=0
kubectl get pods -n nginx | grep -i evicted | awk '{if ($1!="NAME")print $1}'   | xargs  -n 1 kubectl delete pods -n nginx --force --grace-period=0
kubectl get pods -n java | grep -i evicted | awk '{if ($1!="NAME")print $1}'   | xargs  -n 1 kubectl delete pods -n java --force --grace-period=0
kubectl get pods -n kubernetes-dashboard | grep -i Error | awk '{if ($1!="NAME")print $1}'   | xargs  -n 1 kubectl delete pods -n kubernetes-dashboard --force --grace-period=0
****************************************************************************************************************************************************************

