<?php
laravel中使用predis的时候，如果本地安装了原生redis扩展，则需要注释掉。
--------------------------------------------------------------------------------------------------------------------
查看redis的存储空间信息:
1:./redis-cli -a password
2:info
---------------------------------------------------------------------------------------------------------------------
使用redismanager连接redis服务的时候，redis必须设置密码，否则连接不上。
---------------------------------------------------------------------------------------------------------------------
获取redis对象
function get_redis_obj($db=9){
    //实例化redis对象
    $redis=new \Redis();
    //连接Redis
    $redis->connect('192.168.199.227',6379);
    //输入密码
    $redis->auth('football');
    //选择数据库
    $redis->select($db);
    return $redis;
}
--------------------------------------------------------------------------------------------------------------------
服务管理
systemctl stop redis-server   停止
systemctl start redis-server    启动
systemctl restart redis-server  重启
--------------------------------------------------------------------------------------------------------------------
1.要设置后端方式启动服务，需要修改配置文件redis.conf:
 daemonize yes

 2.设置密码,找到requirepass，取消注释，并且设置密码
 requirepass football

 3.设置可以远程连接
 注销bind


监控redis key:

1.启动监控命令:
redis-cli -h 127.0.0.1 -p 6379 -a redis -c monitor > /Users/wang/test/a.log
tail -f /Users/wang/test/a.log
2.请求接口分发队列任务
3.执行队列任务 php artisan queue:work --queue=demo

对key的操作:
>exists key					测试指定key是否存在
>del key1 key2 ... keyn 	删除指定key
>type key					返回key的类型
>keys pattern				返回指定模式匹配的所有key名字信息
  keys col*					获得所有名字为col开始的key的信息
  keys  *                   获得当前redis数据库全部的key的信息
>rename oldkey  newkey		修改名字
>dbsize						返回当前redis数据库key的数量
>expire key seconds  		为key指定过期时间
>ttl key					返回key的剩余生命时间
>select dbindex				选择数据库

redis与mysql数据库相似的地方是有多个数据库供操作
>move key dbindex				将key从当前数据库移动到指定数据库
>flushdb						删除当前数据库中所有key
>flushall	

/**********************************************************************************/
1.string类型的key操作
> set key  value						设置一个string类型key
> set key  value  EX  					过期秒数	//设置有效期时间(秒级)
> set key  value  PX  					过期毫秒数 //设置有效期时间(毫秒级)
> get key								获取key的值
> mset key1 value1 ... keyN valueN		一次设置多个key的值
> mget key1 key2 ... keyN 				一次获取多个key的值

2.list链表类型key操作
lpush key  string  						
	在key对应的链表的头部添加字符串元素lpush(left push)从链表左侧添加单元数据可以多次调用，代表给链表添加多个数据
lpush key  string1 string2 string2  	
	一次性添加多个元素给key的链表
rpop key								
	从list的尾部删除一个元素，并返回rpop(right pop)从链表的右侧删除数据
llen key 								
	返回key对应list链表的长度llen(list length)key不存在返回0如果key对应类型不是list返回错误
lrange key start end					
	返回指定区间内的元素，下标从0开始lrange(left range)从链表的左侧获得范围内的元素出来，链表元素左起下标从0开始，右起从-1开始范围下标从0开始
rpush key string						
	同上，在尾部添加元素rpush(right push)从链表右侧添加单元数据
lpop key								
	从list的头部删除一个元素，并返回删除元素lpop(left pop)从链表的左侧删除数据
ltrim key start end						
	截取list，保留指定区间内元素ltrim(left trim),从左侧做截取保留


3.set集合类型操作
sadd key member [member...]	 添加一个string元素到key对应的set集合中成功返回1如果元素存在，返回0，操作无效可以调用多次，给一个集合添加多个元素
srem key member				 [remove]从key对应的set中移除给定元素
smove k1 k2 member			 从k1集合中移除member成员后添加给k2集合
scard key					 返回集合的元素个数
sismember key member  		 判断member是否在集合中
sinter key1 key2 ... keyN	 返回所有给定key的交集
sunion key1 key2 ... keyN	 返回所有给定key的并集
sdiff key1 key2          	 返回所有给定key的差集内部有key1的元素，不会有key2到keyN的任何元素
smembers key				 返回key对应集合的全部元素与list中的lrange方法相似


4.sortset排序集合类型操作
zadd key score权  member值	 scoreN memberN ..	添加元素到集合(存在就更新，不存在就添加)一次性可以添加1个或多个元素
zrem key member	  (remove)						删除指定元素，1表示成功，0表示被删除元素不存在
zrange key start end 	  						返回集合中指定区间的元素，(权值由小到大排序)序号左起从0开始，右起从-1开始
zrevrange key start end		(reverse反转)		返回集合中指定区间的元素，(权值由大到小排序)序号左起从0开始，右起从-1开始
zcard key					  					返回集合中元素个数
zremrangebyrank key start end  					删除集合中排名在给定区间的元素(权值由小到大排序)序号左起从0开始，右起从-1开始


5.hash哈希类型操作
hset:HSET key field value  							每次设置一个域
hmset:HMSET key field value [field value ...]  		一次性设置1个或多个域
hget:HGET key field 								获得一个key的一个域的信息
hmget:HMGET key field [field ...]  					获得一个key的1个或多个域的信息


--------------------------------------------------------------------------------------------------------------------------------------
Redis设置主从同步
主服务器(负责写):192.168.255.130
从服务器(负责读):192.168.255.131   192.168.255.132

配置redis.conf文件
主服务器配置:
1.注释掉
    bind 127.0.0.1
2.开启守护进程
    daemonize yes
3.设置访问密码
    requirepass football---设置的密码

从服务器配置:
前三步和上面一样
4.配置主机端口号（redis版本不同，显示下面的配置项也不同）
    slaveof 192.168.255.130 6379
    或者
    replicaof 192.168.255.130 6379
5.配置主机验证
    masterauth football---主机的密码
6.配置只读模式（redis版本不同，显示下面的配置项也不同）
    slaveof-read-only yes
    或者
    replicaof-read-only yes

可以在客户端命令行写入key进行测试
最后重启redis服务即可


.env文件
#redis config
REDIS_HOST_NGINX=192.168.255.130
REDIS_HOST_MASTER=192.168.255.131
REDIS_HOST_SLAVE=192.168.255.132
REDIS_PASSWORD=football
REDIS_PORT=6379

laravel-database.conf中redis项的配置
 //laravel-默认配置-predis
    'redis' => [

        'client' => 'predis',//用predis扩展包
        //默认连接
        'default' => [
            'host' => env('REDIS_HOST_NGINX', '101.200.34.217'),
            'password' => env('REDIS_PASSWORD', 'mrwangredis'),
            'port' => env('REDIS_PORT', 6379),
            'database' => 0,
        ],
        //session使用的连接@手动配置
        'session' => [
            'host' => env('REDIS_HOST_NGINX', '101.200.34.217'),
            'password' => env('REDIS_PASSWORD', 'mrwangredis'),
            'port' => env('REDIS_PORT', 6379),
            'database' => 6,
        ],
        //队列使用的连接@手动配置
        'queue' => [
            'host' => env('REDIS_HOST_NGINX', '101.200.34.217'),
            'password' => env('REDIS_PASSWORD', 'mrwangredis'),
            'port' => env('REDIS_PORT', 6379),
            'database' => 7,
        ],
        //缓存使用的连接@手动配置
        'cache' => [
            'host' => env('REDIS_HOST_NGINX', '101.200.34.217'),
            'password' => env('REDIS_PASSWORD', 'mrwangredis'),
            'port' => env('REDIS_PORT', 6379),
            'database' => 8,
        ],
        //广播使用的连接@手动配置
        'broadcast' => [
            'host' => env('REDIS_HOST_NGINX', '101.200.34.217'),
            'password' => env('REDIS_PASSWORD', 'mrwangredis'),
            'port' => env('REDIS_PORT', 6379),
            'database' => 9,
        ],

    ],

    //原生redis扩展
    'redis' => [

        'client' => 'phpredis',//使用原生redis扩展

        'default' => [
            'host' => env('REDIS_HOST_NGINX', '192.168.255.130'),
            'password' => env('REDIS_PASSWORD', 'footballl'),
            'port' => env('REDIS_PORT', 6379),
            'database' => 0,
        ],

    ],

    //predis-集群
    'redis'      => [

        'client'   => 'predis',

        //默认连接
        'default'  => [
            'host'     => env('REDIS_HOST_NGINX', '192.168.255.130'),
            'password' => env('REDIS_PASSWORD', 'footballl'),
            'port'     => env('REDIS_PORT', 6379),
            'database' => 0,
        ],

        //集群配置
        'clusters' => [
            'redis_ji' => [
                [
                    'host'     => env('REDIS_HOST_NGINX', '192.168.255.130'),
                    'password' => env('REDIS_PASSWORD', 'football'),
                    'port'     => env('REDIS_PORT', 6379),
                    'database' => 1,
                ],
                [
                    'host'     => env('REDIS_HOST_MASTER', '192.168.255.131'),
                    'password' => env('REDIS_PASSWORD', 'football'),
                    'port'     => env('REDIS_PORT', 6379),
                    'database' => 2,
                ],
                [
                    'host'     => env('REDIS_HOST_SLAVE', '192.168.255.132'),
                    'password' => env('REDIS_PASSWORD', 'football'),
                    'port'     => env('REDIS_PORT', 6379),
                    'database' => 3,
                ],

            ],
        ],


    ],

    //原生redis扩展-集群
    'redis'      => [

        'client'   => 'predis',
        //用predis扩展包

        //默认连接
        'default'  => [
            'host'     => env('REDIS_HOST_NGINX', '192.168.255.130'),
            'password' => env('REDIS_PASSWORD', 'football'),
            'port'     => env('REDIS_PORT', 6379),
            'database' => 0,
        ],

        //使用原生redis集群时，加入此项
        'options'  => [
            'cluster' => 'redis',
        ],
        //集群配置
        'clusters' => [
            'redis_ji' => [
                [
                    'host'     => env('REDIS_HOST_NGINX', '192.168.255.130'),
                    'password' => env('REDIS_PASSWORD', 'football'),
                    'port'     => env('REDIS_PORT', 6379),
                    'database' => 1,
                ],
                [
                    'host'     => env('REDIS_HOST_MASTER', '192.168.255.131'),
                    'password' => env('REDIS_PASSWORD', 'football'),
                    'port'     => env('REDIS_PORT', 6379),
                    'database' => 2,
                ],
                [
                    'host'     => env('REDIS_HOST_SLAVE', '192.168.255.132'),
                    'password' => env('REDIS_PASSWORD', 'football'),
                    'port'     => env('REDIS_PORT', 6379),
                    'database' => 3,
                ],

            ],
        ],


    ],




获取redis连接对象connection函数中可以传递连接名称，不传递使用默认连接
$redis = Redis::connection('redis_ji');
$redis->set('age','28');
$a= $redis->get('age');
var_dump($a);die();

使用默认连接
Redis::set('name','apple');
echo Redis::get('name');

使用默认连接-批量执行
Redis::pipeline(function ($pipe) {
    for ($i = 0; $i < 10; $i++) {
        $pipe->set("key:$i", $i);
    }
});

echo Redis::get('key:0');
