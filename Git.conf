<?php
git add . ：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，
			包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。

git add -u ：他仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂存区。
			 add -u 不会提交新文件（untracked file）。（git add --update的缩写）

git add -A ：是上面两个功能的合集（git add --all的缩写）

windows下清除git账号：
在类似C:\Users\Wang目录下有一个.gitconfig文件，内容如下：(将email和name置空即可)
[user]
	email = 137120500@qq.com
	name = utagithub
[core]
	autocrlf = true
	excludesfile = C:\\Users\\Wang\\Documents\\gitignore_global.txt
[difftool "sourcetree"]
	cmd = '' \"$LOCAL\" \"$REMOTE\"
[mergetool "sourcetree"]
	cmd = "'' "
	trustExitCode = true

github设置token认证（注意token有效期）
参考（https://blog.csdn.net/weixin_43452467/article/details/121704661）
git remote set-url origin https://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@github.com/utagithub/goods.git
git remote set-url origin https://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@github.com/utagithub/bbs.git
git remote set-url origin https://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@github.com/utagithub/Knowledge.git
https://github.com/utagithub/Knowledge.git

克隆所有分支：
git clone https://****  这里克隆后只能看见主分支，需要远程的其他分支的话：git checkout dev(分支名称)


将本地仓库和远程仓库关联
git remote add origin https://e.coding.net/uta1/qucequwan/test.git

git push -u origin master



1.新建一个空仓库qucequwan
2.git clone https://e.coding.net/gd_loving/qucequwan/qucequwan.git
3.git checkout -d develop
// 3.git checkout -b develop
4.rm README.md
5.git rm README.md
6.git commit -m "remove readme.md"
7.git checkout master
8.git merge develop
	git remote add origin https://e.coding.net/gd_loving/qucequwan/qucequwan.git
9.git push -u origin master
10.git push -u origin develop
11.composer create-project topthink/think=5.1.* tp5   （将tp目录下东西全部拷贝到项目目录下，删除tp5目录）
 11.1 在gitigonrezhong 屏蔽#/vendor   
13.git add -A
14.git commit -m "aaa"
15 git checkout develop
16.git merge master
17.git push -u origin master
18.git push -u origin develop



先在gitigone中屏蔽README.md

1、删除线上readme.txt

2、git pull origin master --allow-unrelated-histories //把远程仓库和本地同步，消除差异

2、重新add和commit相应文件

3、git push origin master

4、此时就能够上传成功了



1.配置用户名和邮箱
git config --global user.name "Your Name"
git config --global user.email "email@example.com"
	注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
	该命令还可用于重置用户名，邮箱

git config user.name 	查看用户名
git config user.email 	查看邮箱

2.初始化git仓库
git init
 	该命令会在目录下生成一个.git的目录，这个目录是Git来跟踪管理版本库的


3.将工作区文件提交到--->版本库的暂存区
git add  文件名

4.将暂存区的文件提交到--->版本库的默认master分支
git commit -m '这里是本次提交的说明'
	git commit命令，-m后面输入的是本次提交的说明，以输入任意内容，
	当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。

PS：
	为什么Git添加文件需要add，commit一共两步呢？
	因为commit可以一次提交很多文件，所以你可以多次add不同的文件，

	比如：
	git add file1.txt
	git add file2.txt file3.txt
	git commit -m "add 3 files."


5.：仓库当前的状态
git status


6.查看文件上次的修改
git diff 文件名
	比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的readme.txt，所以，需要用git diff这个命令看看

要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

7.查看历史记录
git log
	版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看
	git log命令显示从最近到最远的提交日志，

git log --pretty=online
	该命令显示简要的历史记录信息

PS：	需要友情提示的是，你看到的一大串类似1094adb...的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，
	而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？
	因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。

8.版本回退

git reset --hard HEAD^
回退到上一个版本
	首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（
	注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^
	比较容易数不过来，
	所以写成HEAD~100


git reset --hard 1094a（这里是commit_id,不用写完整）
回退到指定版本----得查看的到历史版本的id
版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，
因为Git可能会找到多个版本号，就无法确定是哪一个了。

Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，
Git仅仅是把HEAD从指向指定的版本，然后顺便把工作区的文件更新了。所以你让HEAD指向哪个版本号，
你就把当前版本定位在哪。

git reflog
现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？
找不到新版本的commit id怎么办？
Git提供了一个命令git reflog用来记录你的每一次命令：

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，
	使用命令git reset --hard commit_id。
	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。


9.创建并切换到分支：git checkout -b 分支名称  (新版本git可以用git switch -c 分支名称)
或者使用两个命令：
git branch 分支名称
git checkout 分支名称

删除分支：git branch -d 分支名称


10.分支策略：
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
	
11.多人协作
多人协作的工作模式通常是这样：
1.首先，可以试图用git push origin <branch-name>推送自己的修改；
2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
3.如果合并有冲突，则解决冲突，并在本地提交；
4.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
这就是多人协作的工作模式，一旦熟悉了，就非常简单


工作及个人账户设置
https://www.jianshu.com/p/756dc956f693

ssh-keygen -t rsa -C  'admin@example.com'  -f ~/.ssh/id_rsa_docker_gitlab
git config --global user.name "Administrator"
git config --global user.email "admin@example.com"
