<?php
php --ri swoole|grep Version  查看扩展版本
php -m 查看所有安装的扩展
php -i


PHP扩展的安装
方法一：源码编译
1.下载扩展：--例如--wget http://pecl.php.net/get/zip-1.12.4.tgz
2.解压->进入扩展包目录
3.查看有没有configure文件，如果没有configure文件->执行/usr/local/php/bin/phpize  生成configure文件
4.执行./configure --prefix=xxx是设置软件的安装位置(大部分软件都有此参数)
5.make  &&  make install  编译-安装
6.php.ini中添加扩展，例如：extension=mongodb.so

方法二：pecl
1.先检查/usr/local/php/bin/ 下面有没有 pecl ，pear（安装php-pear是为了使用pecl 中的 phpize）如果没有，则用yum安装（yum install php-pear,php-devel）
2.更新一下pecl库 pecl channel-update pecl.php.net
3.安装相应的扩展 pecl install redis (如果没把php的路径加入环境变量，则需要用绝对地址)
4.一般通过pecl安装的扩展都自动加入php.ini的配置了，如果通过phpinfo() 或者php-m没有查询到安装的扩展，则把相应的so文件加入到php.ini中（extension=redis.so）再重启php-fpm
6.卸载/usr/local/php/bin/pecl uninstall mongodb




1.php 三元操作符的简化使用 (中间省略一项),中间省略的部分代表着第一项
$password ?:  bcrypt('secret'),
如果$password 为true 那么返回本身 不然的话再去执行bcrypt函数

2.双感叹号的用法可能就少多了,其实双感叹号也就相当于程序语言中的三元运算($a?$b:$c),
如:

$a=true;
if(!!$a){
    echo 'ok';
}else{
    echo 'error';
}

2.1 PHP 7 新增加的 NULL 合并运算符（??）是用于执行isset()检测的三元运算的快捷方式。
NULL 合并运算符会判断变量是否存在且值不为NULL，如果是，它就会返回自身的值，否则返回它的第二个操作数
$site = isset($_GET['site']) ? $_GET['site'] : '菜鸟教程';
$site = $_GET['site'] ?? '菜鸟教程';


3.php/js 在函数内部申明的全局变量,在函数调用后生效

4.php.ini对文件上传大小的限制
max_execution_time = 6000
max_input_time = 6000
post_max_size = 90000M
upload_max_filesize = 80000M
max_file_uploads = 200
LimitRequestBody 419430400


5.日期格式转时间戳时该注意点：
windows，linux，Android：2019-5-28
iPhone OS 2019/5/28

6.
对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。
	被定义为公有的--类成员--可以在任何地方（父类、子类、当前的类、类的外部）被访问。
	被定义为受保护的--类成员--则可以被其(自身、子类、父类)访问。
	被定义为私有的--类成员--则只能被其定义所在的类访问。

7.parent 只能访问父类的方法，而不能访问父类的属性，除非这个属性是静态的。


8.打印$this,只输出当前类成员属性，成员方法不输出
class Dad {
	public $x = 1;
	public function t1(){
		echo 'Person';
	}
	public function test(){
		echo "789";
		var_dump($this); //打印$this对象,只输出属性
	}
}

$c = new Dad();
echo "<pre>";
$c->test();

9.常量
define('常量名', 常量值); --- define能够在任何位置使用,define定义的常量具有全局性
const 常量名 = 常量值; --- const只能在顶层使用,const在局部中定义常量
可以把在类中始终保持不变的值定义为常量。在定义和使用常量的时候不需要使用 $ 符号。
常量的值必须是一个定值，不能是变量、类属性、数学运算的结果或函数调用。

类常量:只能使用 const 关键字来定义。
在类的方法中，使用 self 或者 类名 调用类常量，
在类外部，使用类名或对象名调用类常量。
需要注意的是，无论继承与否， self 始终表示它所在的类。


10.使用关键字 static 声明类属性或方法为静态，可以不实例化类而直接访问
class Dad {
	public static $name = '老王'; //定义静态属性
	public static function t1(){
		echo "123"；
	}
	public function t2(){
		echo self::$name; 	//类内部方法中，调用静态属性
		echo Dad::$name; 	//类内部方法中，调用静态属性
		echo static::$name; //类内部方法中，调用静态属性
	}
}
$d = new Dad();
$d->t2();
echo $d::$name;  //类外，调用静态属性
echo Dad::$name; //类外，调用静态属性，此方法不需要实例化对象
Dad::t1(); 		 //类外，调用静态方法，此方法不需要实例化对象

11.在静态方法中，不能使用 $this ，基本上可以理解为，静态方法中不能调用非静态成员。
class Dad {
	public static function t1(){
		$this->t2(); //报错，因为静态方法中使用了$this
		@self::t2(); //这个方法虽然可以调用到非静态的t2，但是如果不加错误抑制符@，会报错
	}
	public function t2(){
		echo 111;
	}
}
Dad::t1();


12.static 调用静态成员时有什么特点？


13.实际上在类的内部，习惯用 self 来调用静态成员，
在类的外部习惯用类名调用静态成员，这一点和调用类常量一样。
class Dad {
	public static $name = '老王';
	public static function t1(){
		echo self::$name;	//self表示当前的类，所以这里肯定输出“老王”
		
		echo static::$name; //static表示在执行到本行的时候，才给static绑定值，值为使用的类，所以这里输出“小王”
	}
}
class Child extends Dad {
	public static $name = '小王';
}
Child::t1();

上述代码体现了 self 和 static 的不同之处，
static 表示在执行到第 139 行的时候，才给 static 绑定值，
值为使用的类Child ，这种情况叫做后期静态绑定。


14.继承
需要注意的是，重写父类成员（属性和方法）时，要保证成员静态的一致性。
比如父类方法是静态的，则重写方法时也要写成静态的，如果父类方法是非静态的，则子类重写方法也不能是静态的，即使父类方法是私有的。
ps：如果父类的--属性--是私有的，则重写时，可以不统一他们的静态性，不过并不建议这么做。

14.1 重写
在继承链条上，如果父类和子类有同名的方法，而且同名方法的参数个数也一样，这种情况就叫做覆盖，覆盖也叫
做重写(override)，即重新在子类中编写一个方法
	14.1.1 方法重写
	子类的方法名和父类的方法名一样，并且方法的参数个数要保持一致（构造方法除外）。
	子类中重写的方法可见性不能小于父类的方法，包括构造方法。
	可见性指的的成员的修饰符，可见性 ：public > protected > private

	14.1.2 属性重写----规则和方法重写相同。parent 关键字不能调用父类的属性，除非这个属性是静态的。

15.
$this ：表示类的实例，即对象，是当前使用的对象在类内部的化身。
self ：表示 self 所在的类
static ：表示代码执行时，使用的类，当前使用的是哪个类，static就表示这个类
parent ：表示父类
调用方式：
				$this 		self 		parent 		static 		类名			对象名
类常量			× 			√（类内） 	√（类内） 	√（类内） 	√（类外） 	不建议
静态属性			× 			√（类内） 	√（类内） 	√（类内） 	√（类外） 	不建议
静态方法			不建议		√（类内） 	√（类内） 	√（类内） 	√（类外） 	不建议
普通成员属性		√（类内） 	× 			× 		 	× 		 	× 			√（类外）
普通成员方法		√（类内） 	不建议		√（类内） 	× 		 	不建议	 	√（类外）

16.静态成员和类常量，存在于内存图示中的静态常量区。它们直接由类管理，不属于任何一个对象。

17.最终类，抽象类
定义一个类后，有两种选择使用这个类：
	1：实例化这个类
	2：被别的类继承
而最终类和抽象类分别体现了类的两个极端。

	17.1：最终类：只能被实例化，不能被继承。（可以继承别的类）
		最终类的意义体现于，表明该类已经是继承链条上的最后一个类了，它不能有后代类（子类）了。另外的说法是，
		说明该类比较完善了，不需要被扩展了。final 类保证了对继承的控制。

		1.1:最终方法
			使用 final 修饰的方法为最终方法，最终方法可以被定义到最终类里面和普通的类（非最终类）里面。最终方法的
			特点是不能被重写。根据最终方法的特点来看，将其定义到普通的类里面才有意义（因为最终类不能被继承，更谈
			不上重写）。
		1.2:属性不能被定义为 final，只有类和方法才能被定义为 final	

	17.2：抽象类：只能被继承，不能被实例化。
		抽象类之所以叫做抽象类，是因为它确实很抽象。比如上级向下级传达精神：
			①. 传智总裁：我们要争做行业内的老大，努力奋斗，不忘初心。 --- （非常抽象）
			②. PHP学院院长：我们要充分领会总裁的精神，务必做到兢兢业业，不要误人子弟。 --- （一般抽象）
			③. PHP教学总监：我们要充分领会院长的精神，好好备课，好好上课。 --- （有点具体）
			④. PHP讲师：备课、上课、学习。 --- （太TM具体了）

		抽象类就如同“总裁”，是继承链条中最顶层的类，它只规定一些方法，但并不去实现他们，而是把任务交给下一级
		去实现，如果下一级也也实现不了，则可以继续交给下一级，以此类推，到继承链条的最底层，则必须实现上层规
		定的方法。
		用 abstract 声明抽象类。

		1.1:抽象方法
			使用 abstract 定义抽象方法。抽象方法必须满足下面两个条件：
			抽象方法不能有方法体，即不能有大括号。
			抽象方法不能是私有的，因为继承它的子类必须重写它。
			abstract class A {
				abstract public function aa(); //正确
				abstract protected function bb($x, $y=1); //正确
				abstract public static function cc(); //正确
				abstract private static function dd(); //错误，因为方法是私有的
				abstract public static function ee(){ // 错误，因为方法有大括号->方法体
				}
			}
		1.2：抽象方法不能定义到普通的类里面。反过来说，含有抽象方法的类一定是抽象类。
			当一个类继承了抽象类，就必须完成继承的抽象方法，即重写父类的抽象方法，而且要满足重写规则。

		1.3：抽象类及抽象方法的意义在于，复杂的层级关系中，实现开发的规范化。
			比如有一个项目，该项目需要对 Mysql 数据库进行操作，也需要对 SQL Server 数据库进行操作。则需要针对不同
			的数据库各自写一个类，假设项目经理让张三完成 Mysql 类，让李四完成 Mssql 类，张三在写查询方法的时候，
			定义的方法名为 select ，参数为一条SQL语句，而李四在写查询方法的时候，方法名叫 fetchAll ，参数为一条SQL
			语句和一个表示数据格式的 type 。这样的话，我们在做查询操作的时候，非常容易混淆两个查询方法。
			好的做法是可以先定义一个抽象类，里面规定好查询方法叫什么名字，参数有哪些。张三和李四在写各自的类的时
			候，需要继承该抽象类，这样对两名程序员就要求一致了。我们在调用查询方法的时候，用法肯定是一样的了
			abstract class Db {
				abstract public function select($sql);
				abstract public function add($sql);
			}
			//张三开发 Mysql类
			final class Mysql extends Db {
				public function select($sql){}
				public function add($sql){}
			}
			//李四开发 Mssql类
			final class Mssql extends Db {
				public function select($sql){}
				public function add($sql){}
			}
			$obj = new Mssql(); //如果更换类的话，select方法始终不变
			$obj->select('select * from article');


18.接口interface
使用 interface 定义接口，接口中只能有--接口常量--和--方法（静态和非静态都可以）。
	18.1：接口中的接口常量，后代不能重写。
	18.2：接口中的方法必须是 public 形式的
	18.3：接口中的方法不能使用 abstract 定义，但都是抽象的，也就是不能有方法体（大括号）
	18.4：可以使用关键字 implements 让一个类去实现接口，实现接口时，则必须完成接口中定义的所有方法，而且必须满
		足方法重写要求。
	18.5：另一个问题，PHP中的继承是单继承，即一个类一次只能继承一个类。而类去实现接口，一次性可以实现多个接
		口，同样，类必须实现所有接口中的方法，并且这些被实现的接口中不能有重名方法。


19、重载（overloading)
第一句话是，不要把重写(override)和重载(overload)弄混了。
前面学过的--重写--是子类继承父类时，重写了父类的成员，父子类中存在同名方法，而且参数一致。
而--重载--的本意是一个类中，有两个同名方法，但是他们的参数不同，Java语言中的重载就是这样的。
但是PHP的重载和Java的重载不太一样。PHP所提供的重载（overloading）是指动态地创建类属性和方法。我们是
通过魔术方法（magic methods）来实现的。
当调用当前环境下未定义或不可见的类属性或方法时，重载方法会被调用。本节后面将使用不可访问属性
（inaccessible properties）和不可访问方法（inaccessible methods）来称呼这些未定义或不可见的类属性或方法。

	19.1：属性重载
	可以先考虑一个问题，在类的外部无法直接访问到类的私有属性，那么有没有间接的办法呢？看下面的代码：
	class A {
		private $x = 1;
		private $y = 2;
		//定义公开的方法，返回私有属性的值
		public function get($name){
			return $this->$name;
		}
	}
	$a = new A();
	echo $a->get('x'); // 1
	PS:间接的拿到类里面私有属性的办法就是定义一个公开的方法，让这个方法去拿私有属性。
	上面的 get 方法是自己定义的，其实PHP内置了很多魔术方法，可以针对不同情况下的属性重载，这些魔术方法有
	__get()、__set()、__isset() 、__unset() 。这些魔术方法在定义时，必须是非静态的公开的方法。
	
	19.1.1：访问不可见属性,访问了不可见成员，__get()函数会被触发
	class Test {
	    private $x = 1;
	    public function __get($name){
	        return $this->$name;
	    }
	}
	$t = new Test();
	echo $t->x;//此时，访问了不可见成员x，所以__get被触发。所以输出 1
	
	19.1.2：设置不可见属性,设置了不可见属性的值，所以__set()被触发
	class Test {
	    private $x = 1;
	    public function __get($name){
	        return $this->$name;
	    }
	    public function __set($name,$value){
	        return $this->$name = $value;
	    }
	}
	$t = new Test();
	$t->x = 222;//此时，设置了不可见属性的值，所以__set被触发。
	echo $t->x;//此时，访问了不可见成员x，所以__get被触发。所以输出 2

	19.1.3：对不可见属性使用isset()函数时，__isset()方法被调用
	class Test {
	    private $x = 1;
	    public function __get($name){
	        return $this->$name;
	    }
	   public function __set($name,$value){
	        return $this->$name = $value;
	    }
	    public function __isset($name){
	        var_dump(isset($this->$name));
	    }
	}
	$t = new Test();
	if(isset($t->x)){//当对不可见成员使用isset函数的时候，魔术方法__isset()被触发
	}

	19.1.4：对不可见属性使用unset()函数时，__unset()方法被调用
	class Test {
	    private $x = 1;
	    public function __get($name){
	        return $this->$name;
	    }

	    public function __unset($name){
	        unset($this->$name);
	    }
	}
	$t = new Test();
	unset($t->x);	//当对不可见成员使用unset函数的时候，魔术方法__unset()被触发
	var_dump($t->x);//上面一行代码触发魔术方法__unset()，这一行执行的时候会报错

	19.2：方法重载
	当访问对象 ---不可见方法--- 或 ---不可见静态方法---的时候，__call 或__calstatic 被调用，
	该方法有两个参数，参数一是调用的方法名，参数二是数组，表示传递给被调用方法的参数。

	19.2.1：访问不可见方法，__call()函数会被触发
	class A {
	    public function __call($name, $arguments)
	    {
	        echo $name . '<br>';
	        var_dump($arguments);
	        echo "<br/>";
	    }
	}
	$a = new A();
	$a->aa(); //输出方法名aa，打印出来空数组
	$a->aa(1,2,3); //输出方法名aa，打印出数组[1,2,3]

	19.2.2：访问不可见静态方法，__callstatic()函数会被触发
	class A {
	//该魔术方法必须为静态
		public static function __callStatic($name, $arguments)
		{
			echo $name . '<br>';
			var_dump($arguments);
	        echo "<br/>";
		}
	}
	A::aa(); //输出方法名aa，打印出空数组，在类的外部使用类名调用方法，说明是静态方法
	A::aa(1,2,3); //输出方法名aa，打印出数组 [1,2,3]


20:多态
和重载一样，PHP的多态和Java中的多态也是不一样的，甚至可以说PHP中没有多态。
如果非要说PHP中的多态，可以使用方法重载的知识来完成。
PHP中的多态可以理解为，继承一个类后，子类重写了父类的方法，
我们通过子类的对象来灵活调用父子两个类中的同名方法的办法。
class A {
	public function aa($argu){
		echo '父类方法';
		var_dump($argu);
	}
}
class B extends A {
//子类重写了父类的aa方法
	public function aa($argu){
		echo '子类方法';
		var_dump($argu);
	}
//魔术方法，判断调用的是什么方法，然后由__call决定调用父类的aa还是子类的aa方法
	public function __call($name, $arguments)
	{
		if($name == 'a1'){
			$this->aa($arguments);
		}elseif ($name == 'a2'){
			parent::aa($arguments);
		}
	}
}
$b = new B(); //实例化子类
//如何通过$b调用父类的aa和子类的aa呢？
$b->a1(1,2); //访问不可见方法a1,出发__call方法，实际上相当于调用了子类的aa方法
$b->a2(3,4); //访问不可见方法a2,出发__call方法，实际上相当于调用了父类的aa方法


21.trait
自 PHP 5.4.0 起，PHP 实现了一种代码复用的方法，称为 trait（特点、特征）。
Trait 是为类似 PHP 的单继承语言而准备的一种代码复用机制。Trait 为了减少单继承语言的限制，使开发人员能够
自由地在不同层次结构内独立的类中复用方法 method。Trait 和 Class 组合的语义定义了一种减少复杂性的方式，
避免传统多继承和 Mixin 类相关典型问题。
trait 无法实例化，使用 trait 的类不需要有继承的关系。
trait 的声明和类一样，只不过 trait 中不可以定义常量，但可以定义抽象方法。
例：
trait A {
	public $x = 1;
	private $y = 2; //私有成员
	protected static $z = 3; //静态成员
	public function aa(){
		echo 123;
	}
	protected function bb(){
		echo $this->name;
	}
	private function cc(){
		echo 456;
	}
	public static function dd(){
		echo 789;
	}
	abstract public function ee();
}


class A {
	const ABC = 'hello';
	private $x = 1;
	public function __construct(){
		echo $this->x;
	}
	public static function aa(){
		echo 2;
	}
	private function cc(){
		echo 3;
	}
}
class B {
	const ABC = 'hello';
	private $x = 1;
	public function __construct(){
		echo $this->x;
	}
	public static function aa(){
		echo 2;
	}
	private function cc(){
		echo 4; //注意这里和A类的写法不一样
	}
}

我们发现，A 和 B 类里面的内容非常相似，这样写完两个类，代码非常多，我们可以将 A 类和 B 类中相同的内容
抽离出来单独封装，封装的结果就是 trait ， 这就是 trait 的由来。

在 A 类和 B 类中，使用关键字 use ，引入 trait。

因为 trait 是抽离类中的部分内容而来的，所以 trait中的成员的可见性同样适用于使用 trait 的类。
即trait 中的私有成员就相当于类中的私有成员，trait 中的受保护成员相当于类中的受保护成员，
trait 中的公开成员相当于类中的公开成员。
trait Same {
	private $x = 1;
	public function __construct(){
		echo $this->x;
	}
	public static function aa(){
		echo 2;
	}
}
class A {
	const ABC = 'hello';
	use Same; //相当于把剪切出去的内容，引入回来
	private function cc(){
		echo 3;
	}
}
class B {
	const ABC = 'hello';
	use Same; //相当于把剪切出去的内容，引入回来
	private function cc(){
		echo 4;
	}
}

PS:
1.trait 定义了一个属性后，类就不能定义同样名称的属性，否则会产生 fatal error
2.Trait 定义的抽象方法，使用 trait 的类必须实现这些抽象方法

21.1:冲突的解决
trait A {
	public function sayHello() {
		echo 'Hello ';
	}
	public function aa(){
		echo 1;
	}
}
trait B {
	public function sayWorld() {
		echo 'World!';
	}
	public function aa(){
		echo 2;
	}
}
trait C {
	use A, B{
	A::aa insteadof B; //A中的aa方法代替B中的aa，所以使用的是A中的aa方法
	//B::aa insteadof A; //B中的aa方法代替A中的aa，所以使用的是B中的aa方法
	}
}
class D {
	use C;
}
$o = new D();
$o->sayHello();
$o->sayWorld();
$o->aa();

上面，通过对象 $o 调用的 aa 方法就是 A 中的 aa 方法了。但是 B 中的 aa 方法呢？无法调用了，我们可以使用另
一种方法解决上面的冲突，那就是使用 as 给冲突的方法设置别名。
trait C {
	use A, B{
		A::aa insteadof B; //必须指定A中的aa还叫做aa
		B::aa as bb; //然后才可以给B中的aa起别名
	}
}

21.2：修改访问控制
trait A {
	public function sayHello() { // trait 中是公有方法
		echo 'Hello World!';
	}
}
// 修改 sayHello 的访问控制
class B {
	use A {
		sayHello as protected; //将trait引入到B类中，修改方法sayHello为受保护的
	}
}
// 给方法一个改变了访问控制的别名
// 原版 sayHello 的访问控制则没有发生变化
class C {
	use A {
		sayHello as private myPrivateHello;//将trait引入到C类中，修改方法sayHello为私有的，并修改方法名为myPrivateHello
	}
}
$b = new B();
//$b->sayHello(); //报错，方法受保护
$c = new C();
//$c->myPrivateHello(); //报错，方法私有

21.3：继承的类中使用trait
一个类 B 继承了另一个类 A，同时类 B 使用了trait C ，
则 子类B 的成员覆盖了trait的方法，而 trait 则覆盖了父类A 的方法。

通过子类对象调用方法的时候，优先级：子类中方法 > trait中方法 > 父类方法
trait C {
	public function cc(){
		echo 'C - cc';
	}
}
//定义A类
class A {
	public function cc(){
		echo 'A - cc';
	}
}
//B类继承A类
class B extends A {
	public function cc(){
		echo 'B - cc';
	}
	use C;
}
$b = new B();
$b->cc(); //此时调用的是B类中的cc方法

24：类型约束
php是弱类型语言，声明的变量无需指定数据类型。
PHP5开始可以在声明函数的时候，约束参数是哪种数据类型。
PHP7和PHP5一样，可以对函数的参数的数据类型进行约束，但是较PHP5没有严格。
使用PHP7的强类型模式，则类型约束的结果和PHP5中一致。
推荐只对数组和对象类型的参数进行约束，其他数据类型最好不要约束（官方文档说类型约束不能用于标量类型，
但实测可以）。
declare(strict_types=1); //开启强类型模式，这样PHP5和PHP7执行结果一致
//声明函数test，要求传递给test的第一个参数必须是整型，第二个参数必须是布尔型
function test(int $a, bool $b){
	echo '<pre>';
	var_dump($a, $b);
}
test(123, true); //正确
test(456, 'hello'); //错误，因为第二个参数必须是布尔型
test(123, []); //错误，因为第二个参数必须是布尔型

-------------------------------------
function test(array $a, A $b){
	echo '<pre>';
	var_dump($a, $b);
}
//声明 A 类
class A{
}
//声明 B 类，继承A类
class B extends A {
}
//声明 C 类
class C{
}
//调用test函数
test(['x','y'], new A()); //正确
test(['x','y'], new B()); //正确
test(['x','y'], new C()); //错误
上面的例子即使不开启强类型模式，PHP5和PHP7的执行结果都是一样的，
也就是说PHP支持约束参数为数组或某个类的对象。

25：对象的遍历
class A {
    public $x = 1; 		//公有属性
    protected $y = 2; 	//受保护的属性
    private $z = 3; 	//私有属性
    public static $a = 4; //静态属性
    public function __construct(){
		//构造方法，在类的内部遍历对象的属性
        foreach ($this as $key=>$value){
            echo "{$key} -- {$value} <br>";
        }
    }
}
$a = new A();
/*
x -- 1
y -- 2
z -- 3
*/
echo '<hr />';
//类的外部遍历对象的属性
foreach ($a as $key=>$value){
    echo "{$key} -- {$value} <br>";
}
// x -- 1
静态成员属于类，不属于对象，所以无论在类的内部还是外部都不能通过遍历对象得到。

26:	其他魔术方法
前面已经把大部分魔术方法都学习了，还有 __invoke() 和 __toString() ：
__invoke()	：当把对象当做函数来调用的时候，会触发这个魔术方法。
__toString()：把对象当做字符串调用的时候，会自动触发。该方法必须返回一个字符串类型的值

class A {
	public function __invoke()
	{
		echo '你搞错了，我是对象，不是函数';
	}
	public function __toString()
	{
		return '你不能有echo输出我，因为我是对象'; //该方法必须返回一个字符串
	}
}
$a = new A();
$a();	 //把对象当做函数调用了，所以输出 “你搞错了，我是对象，不是函数”
echo $a; //把对象当做字符串调用了，所以输出 “你不能有echo输出我，因为我是对象”

27：魔术常量
__LINE__ 文件中的当前行号。
__FILE__ 文件的完整路径和文件名。
__DIR__  文件所在的目录。它等价于 dirname(FILE)。除非是根目录，否则目录中名不包括末尾的斜杠。
__FUNCTION__ 函数名称。
有关面向对象的魔术常量如下
__CLASS__ 类的名称。如果类在命名空间中，则该常量包含命名空间。自 PHP 5.4 起 trait 中的CLASS 是调用 该
__TRAIT__ Trait 的名字。如果有命名空间，则该常量包含命名空间。
__METHOD__ 类的方法名。返回该方法被定义时的名字，形如 “A::a”。 如果有命名空间，则该常量包含命名空
间。
__NAMESPACE__ 当前命名空间的名称。有关命名空间的知识，在后面讲。
DIRECTORY_SEPARATOR表示两个目录直接的那条斜线，windows下是反斜线（\），linux下是正斜线（/）


28.命名空间
这里提到的空间如同文件系统中的文件目录结构。试想，在同一个文件夹下能够存在两个同名文件吗？
答案是不能的，但是可以用子目录的方式解决此问题。
同理，在同一个php文件中，能够定义同名的两个常量吗？能够定义同名的两个函数吗？能够定义同名的两个类
吗？答案是不能的，可以使用命名空间解决此问题。

通过定义命名空间（namespace），给类、常量、函数提供不同的虚拟空间，来划分其作用的空间，避免相互冲
突。同时可以用来避免自定义函数与系统函数的冲突。
这里的常量指的是由 const 定义的，而不能是 define 定义的。
---------------------------------------------------------
//定义命名空间 b
namespace b;
class Test{
}
const ABC = 'hello';
function aa(){
}
//定义命名空间 c
namespace c;
class Test{
}
const ABC = 'hello';
function aa(){
}
上面代码由于命名空间的存在，使得在同一个文件中同时存在同名类、函数、常量变的可行。
---------------------------------------------------------
PS:受命名空间影响的只有类、函数和由 const 定义的常量。
实际开发中，一个文件只存放一个类，命名空间的定义要放到文件最开始的位置，即使header也不要在命名空间定义之前输出

28.1:非限定名称访问
这种情况是在当前的命名空间中，直接使用类、函数或常量即可，和没有命名空间时的使用方式一样。
namespace Blue;
class Top {
	public $name = '石头人';
}
$a = new Top(); //类和使用类的代码在同一个命名空间中，则和没有命名空间时的用法一样
echo $a->name;

28.2.限定名称访问
在有父子关系的两个空间中，在父空间中调用子空间的类，使用这种方式。
这种方式如同文件系统中的相对路径。

//定义子空间
namespace A\B;
class T1 {
	public $name = '石头人';
}
//定义父空间
namespace A;
class T1 {
	public $name = '老司机';
}
//在父空间（A）中，调用用子空间（B）中的类
$o = new B\T1(); //直接指定子空间下面的类，如同文件系统中的相对路径。
// $o = new \A\B\T1(); //也可以通过绝对路径。
echo $o->name; //输出 石头人

28.3.完全限定名称访问
毫无关系的两个空间，一个空间调用另一个空间中的内容，使用这种方式。这种方式用的比较多。
这种方式如同文件系统中的绝对路径
//定义B空间
namespace B;
class T1 {
	public $name = '石头人';
}
//定义A空间
namespace A;
class T1 {
	public $name = '老司机';
}
//使用A空间的类，直接使用
$obj = new T1();
echo $obj->name; //输出 老司机
//在A空间中调用用B空间中的类
$o = new \B\T1(); // 最前面的反斜线表示根空间
echo $o->name; //输出 石头人

28.4.引入其他空间
还是两个毫无关系的空间，其中一个空间如何调用另外空间内容的问题。这个问题前面的完全限定名称访问已
经说过了，这里在提供一种使用方式。这种方式就是使用 use 引入其他空间中的类到当前空间。
//B空间中的类为T
namespace B;
class T {
	public $name = '石头人';
}
//A空间中的类为K
namespace A;
class K {
	public $name = '老司机';
}
//使用自己空间中的类，直接使用
$obj = new K();
echo $obj->name; //输出 老司机
//在A空间中引入 B空间中的类T
//use \B\T; //在A空间中引入 B空间中的类T
use B\T; //在A空间中引入 B空间中的类T，这样引入和上一行的引入是一个意思，建议使用这种方式
$o = new T();
echo $o->name; //输出石头人

use 引入空间中的类的时候，前面的斜线（\）可以省略，因为use默认从根空间开始查找。而且建议不写最前面的斜线。
-----------------------------------------------
问题是，如果两个空间（B和A）中的类同名怎么办？答案是为避免两个同名类冲突，需要为引入的类起别名。
//B空间中的类为T
namespace B;
class T {
	public $name = '石头人';
}
//A空间中的类也为T
namespace A;
class T {
	public $name = '老司机';
}
//使用自己空间中的类，直接使用
$obj = new T();
echo $obj->name; //输出 老司机
//在A空间中引入 B空间中的类T
use \B\T as T1; //在A空间中引入B空间中的类T，定义别名为T1
$o = new T1();
echo $o->name; //输出石头人

28.5.全局空间
我们还有一种情况没有讨论，如果一个类 A 没有定义在任何命名空间里，另一个类 B 定义在命名空间 Home 中，
则在 Home 空间如何使用 A 类呢？
首先明确一个概念，没有定义在命名空间中的类，则相当于在全局空间中。
那么问题解决了，使用全局空间 （\），即可调用到类 A。
//声明A类，它没有定义在任何命名空间中，则相当于是全局空间中的类
class A {
	public $name = 'a';
}
//定义命名空间 Home
namespace Home;
class B {
	public $name = 'b';
}
$b = new B(); //使用当前空间中的类，直接使用
echo $b->name; //输出 b
$a = new \A(); //调用全局空间中的类A
echo $a->name; //输出 a


29.PDO
PDO(PHP Data Object)，PHP数据对象，有一个对象，它能够操作数据库中的数据，
这个对象就是PDO。PDO是数据库抽象层的一种，可以使用PDO来操作常用的各个数据库（Mysql、SQL Server、oracle），
写一套代码可以操作任何的数据库
PDO类的构造函数的参数：
1.	dsn：连接数据库时的一些信息（字符串类型），如数据库类型、主机地址、数据库名、编码、端口等。
2.	user：数据库用户名（字符串类型）
3.	pwd：数据库密码（字符串类型）
4.	drivers：连接数据库时的一些选项（数组类型），这是一个可选参数

PDO和PDOStatement的关系
这两个类的区别是什么呢？或者说这两个类都是做什么的？
答：实际开发中，PDO用来处理SQL语句。将处理后的结果交给PDOStatement去处理。
那么这两个类的关系如何建立？
调用PDO对象中的query方法或者prepare方法都能够能够得到PDOStatement对象。换句话说，PDO中的query和prepare方法都返回PDOStatement类的对象。这意味着：
	得到PDO类的对象需要实例化PDO类，就是new PDO();
	得到PDOStatement类的对象，不需要实例化，而是通过调用PDO中的query或prepare得到。


实例化得到PDO对象
	$pdo = new PDO("mysql:host=localhost;dbname=php688;charset=utf8","root","root")
PDO-增-删-改
	$sql='insert into author(name) values ("老王")';
	$res=$pdo->exec($sql);
	if($res){
	   echo '插入的数据id：'.$pdo->lastInsertId();
	}

PDO-查
	$sql="select * from author";
	$pdo_stat = $pdo->query($sql);
	$res=$pdo_stat->fetchAll(2);//解析结果集
	echo $pdo_stat->rowCount();//上一个SQL的影响行数


PDO预处理-增-删-改
①、写预处理语句
②、使用PDO中的prepare方法预先处理 预处理语句（SQL语句），得到PDOStatement对象
③、如果SQL中有占位符，就使用PDOStatement对象中的bindValue或bindParam绑定参数
	bindValue：绑定值的时候，值可以是具体的值也可以是一个变量，但是这个变量必须先声明。
	bindParam：绑定值的时候，值不可以是具体的值，必须是一个变量，而且这个变量可以在绑定之前声明也可以在绑定之后声明。
	建议使用bindValue。
④、使用PDOStatement对象中的execute方法执行

	$sql = 'insert into author(name,article_id) values (?,?)';
	$pdo_stat = $pdo->prepare($sql);
	$pdo_stat->bindValue(1,'wang');
	$pdo_stat->bindValue(2,456);
	$res = $pdo_stat->execute();
	if($res){
	    echo "ID:".$pdo->lastInsertId();
	}else{
	    echo "添加失败";
	}
	----------------------------------------------------------
	$sql = 'insert into author(name,article_id) values (:id1,:id2)';
或者	$sql = 'insert into author(name,article_id) values (:name,:article_id)';

	$pdo_stat = $pdo->prepare($sql);

	$pdo_stat->bindValue(':id1','wang');
或者	$pdo_stat->bindValue(':name','wang');

	$pdo_stat->bindValue(':id2',456);
或者	$pdo_stat->bindValue(':article_id',456);
	$res = $pdo_stat->execute();
	//$pdo_stat->debugDumpParams()获取去执行的sql
	if($res){
	    echo "ID:".$pdo->lastInsertId();
	}else{
	    echo "添加失败";
	}

PDO预处理-查
①、写预处理语句
②、使用PDO中的prepare方法预先处理 预处理语句（SQL语句），得到PDOStatement对象
③、如果SQL中有占位符，就使用PDOStatement对象中的bindValue或bindParam绑定参数
④、使用PDOStatement对象中的execute方法执行

	$sql = 'select * from author where name=?';
	$pdo_stat = $pdo->prepare($sql);
	$pdo_stat->bindValue(1,'wang');
	$res = $pdo_stat->execute();
	if($res){
	    $res_data=$pdo_stat->fetchAll(2);
	}else{
	    echo "查找失败";
	}

PS：
	1、一条SQL，如果没有任何占位符，也可以使用预处理。
	2、不要乱用占位符（只有where和having可以使用占位符，group by、order by、limit都不能使用占位符）

PDO其他知识：
实例化得到PDO对象，有四个参数，第四个参数为数组(可选)
	$dsn = "mysql:host=localhost;dbname=php688;charset=utf8";
	$pdo = new PDO($dsn,"root","root",[
		PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES UTF8",//如果DSN中没有设置编码，可以在这里设置
		PDO::ERRMODE_EXCEPTION,//设置PDO的错误模式,有三种，这里设置为异常模式（警告，静默），默认静默模式
		PDO::ATTR_PERSISTENT => true,//持久化链接
	]);


知识点：
1.func_num_args()---获取函数参数总个数
2.func_get_args()---获取函数参数列表
3.func_get_arg(1)---根据参数索引获取具体参数
示例：
function abc($a,$b){
    $args_num = func_num_args();
    echo "<pre >";
    var_dump( func_get_args());
    if($args_num>1){
        echo func_get_arg(1);
    }
}


PHP操作mysql存储图片二进制
$file_contents = file_get_contents('./2.jpg');
$file_contentss = base64_encode($file_contents);

PHP操作mysql存取图片二进制
base64_decode('图片字段名')；


30.PHP本身作为WEB服务器
首先在PHP环境下，在任意位置新建目录(目录名随意，这里使用http)，在目录下新建index.php文件，
文件类容:
<?php
echo '<pre>';
var_dump($_SERVER);

在该目录下启动命令行窗口，执行命令：php -S localhost:9000，就会启动一个web服务。
浏览器访问：localhost:9000，会访问到http下的index.php文件。
if (php_sapi_name() == 'cli-server') {
    echo "PHP 内置 Web 服务器";
} else {
    echo  "其他Web服务器";
}


31.instanceof关键字使用,判断实例是否属于某个类或某个接口
interface I {
    public function hello();
}

class A implements I {
    public function hello() {
        print("Hello from A\n");
    }
}

class B extends A {
    public function greeter() {
        print("Hello from B\n");
    }
}

$a = new A;
$b = new B;

var_dump($a instanceof A);echo "<br />";
var_dump($b instanceof B);echo "<br />";
var_dump($b instanceof A);echo "<br />";
var_dump($b instanceof I);echo "<br />";


32.多参数传递方法
function test($a,$b,$c){
    echo   $a+$b+$c;
}
$arr=[1,2,3];
test(1,2,3);
test(...$arr);


33.call_user_func_array ( callable $callback , array $param_arr ) : mixed
把第一个参数作为回调函数（callback）调用，把参数数组作（param_arr）为回调函数的的参数传入。
回调函数如果不是静态的，必须实例化类得到对象传入。
function foobar($arg, $arg2) {
    echo __FUNCTION__, " got $arg and $arg2\n";
}
class foo {
    function bar($arg, $arg2) {
        echo __METHOD__, " got $arg and $arg2\n";
    }
}


// Call the foobar() function with 2 arguments
call_user_func_array("foobar", array("one", "two"));

// Call the $foo->bar() method with 2 arguments
$foo = new foo;
call_user_func_array(array($foo, "bar"), array("three", "four"));

34.
new $class($this) 
这显然是调用类的构造函数，类名是$class,这个类有一个构造函数参数为$this对象所属的类的类型。

35.花括号{}的用法
35.1
$str='phpernote.com';
echo $str{0}; // 输出 p
echo $str[1]; // 输出 h
$str='000';
$str{0}='1';
echo $str; // 输出 100

35.2。对于可变变量使用大括号，比如：{$val}，这时候大括号就是告诉PHP，括起来的部分要当成变量处理。如下例子：
$array=array('www','name'=>'phpernote','com');
echo "$array['name']";//用此句会报语法错误
echo "{$array['name']}";//此句正常，大括号内的字符将作为变量来处理


36.join()和implode()两个函数功能相同
$demo_arr=['wo','men','de','xue','xiao'];
echo implode(',', $demo_arr);//wo,men,de,xue,xiao
echo "<br >";
echo join(',', $demo_arr);//wo,men,de,xue,xiao

37.break continue
break是结束整个循环体，continue是结束单次循环
break num是结束外层第num层整个循环体，continue num 是结束外层第num层单次循环

foreach($arr1 as $value1)
{
    foreach($value1 as $value2)
    {
        if($value2 == 0)
        {
           continue; //继续下次循环,在里层的foreach里面，默认为1
           continue 2;//继续下次循环,在外层的foreach里面
           break; 则同理
        }
    }

}

38.generator和yield关键字的配合使用
function gen_one_to_three() {
  for ($i = 1; $i <= 3; $i++) {
    //注意变量$i的值在不同的yield之间是保持传递的。
    yield $i;
//    return $i;
  }
}

$generator = gen_one_to_three();

var_dump($generator);
echo "<br />";
foreach ($generator as $value) {
  echo "$value"."<br />";
}

