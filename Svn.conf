<?php
1.安装SVN服务器：yum -y install subversion

2.创建仓库，考虑到一个公司会有多个项目，我们按照以下步骤来操作。
2.1.创建仓库主目录：mkdir /home/svndata

2.2.假如公司有两个项目：①商城项目，②官网项目，我们需要创建项目对应的仓库目录。
	①：mkdir -p /home/svndata/shop
	②：mkdir -p /home/svndata/guanwang

2.3.分别给两个项目创建SVN仓库：
	①：svnadmin create /home/svndata/shop
	②：svnadmin create /home/svndata/guanwang
	②：svnadmin create /home/svndata/xietong_danji2020
	仓库创建完成后，会在相应的目录下生成一些文件和目录。

2.4.启动SVN服务，使得SVN仓库可以正常运行,由于有多个项目，所以将服务启动到主目录（/home/svndata）,每个项目都可使用：
	启动SVN服务:svnserve  -d  -r /home/svndata
	-d：表示仓库以独立的端口运行,端口是3690
	-r：表示仓库的地理位置(仓库路径名)

2.5.在客户端与SVN仓库取得联系：
	①：URL of repository(仓库地址):svn://192.168.43.130/shop
		本地地址：例：E:\svndata\shop
	②：URL of repository(仓库地址):svn://192.168.43.130/guanwang
		本地地址：例：E:\svndata\guanwang

2.6.接下来就可以在本地提交文件到svn仓库了，由于svn提交需要认证用户，在没有用户的情况下可以先开启匿名账号权限。
	以shop仓库为例：修改/home/svndata/shop/conf/svnsvnserve.conf文件中的：anon-access = write ，write表示可读可写
	svn本身特点：配置文件修改后，不需要重启服务(每次执行动作都会重新加载配置文件)

2.7.在仓库查看提交的文件：以shop仓库为例
	存储日志信息目录：/home/svndata/shop/db/revprops
	存储项目文件内容目录:：/home/svndata/shop/db/revs

2.8.本地文件颜色的说明：
	① 蓝色加号：本地的.svn对该文件有形成管理(远程仓库 还没有该文件记录)，该文件已经执行add操作
	② 绿色对号：本地文件、.svn管理的版本文件、远程仓库文件 三者内容完全一致
	③ 红色叹号：本地文件  与  .svn和仓库文件 不一致(用户自己修改了该文件)
	④ 黄色叹号：表示该文件正处于冲突状态，是 仓库文件 与 本地文件 针对同一处代码修改做融合后的效果体现
	⑤ 蓝色问号：新建的一个文件，本地.svn 和 远程仓库 对该文件都没有记录

2.9.修改主机名有两种方式：
	① 右键----->relocate
	② 把本地的隐藏文件.svn删除，再重新checkout
    ②方式会把仓库的全部代码文件重新同步更新到本地，如果项目文件较多较大，则会耗费较多的时间，效率没有①方式高

2.10.冲突conflict，解决冲突
	广义： 多个用户对同一个文件进行修改，修改后的文件提交到服务器试图去覆盖先提交文件时就是一个冲突。
	狭义： 多个用户对同一个文件、同一处代码进行修改，后修改文件提交到服务器试图去覆盖先提交的文件，就是一个冲突，该冲突更准确。
	版本控制：
	每个程序文件本身有版本号码，每次提交的时候该版本都会自动增长
	a. 本身版本号码 等于 仓库版本号码 就可以正常提交
	b. 本身版本号码 小于 仓库版本号码 就禁止提交以避免文件覆盖

	解决冲突：
	①：修改的代码不在同一处
	处理多人在同一个时间段内对同一个文件进行修改，大家彼此修改的位置是不同
	解决：
	(1)	首先执行update更新操作(更新仓库代码文件与本地代码文件做融合操作)
		作用是把仓库最新的文件内容更新同步到本地，并与本地文件做融合操作(非覆盖)，
		同时也会同步更新文件的版本号码(使得本地文件版本号码 与 仓库的保持一致)
	(2)	确认被提交的文件没有问题就再次提交同步到仓库

	②修改的代码在同一处(行)
	处理多人在同一个时间段内对同一个文件进行修改，大家都对同一处代码进行修改

	解决：
	(1)首先执行update更新操作(更新仓库文件与本地文件做融合操作)
	(2)删除生成的3个辅助冲突文件
		文件解释:
		(2.1)	register.php：本身文件 与 仓库文件 做融合的效果
		(2.2)	register.php.mine：执行update更新前，该文件的效果
		(2.3)	register.php.r17：是register.php文件 处于17号版本的样子
		(2.4)	register.php.r18：是register.php文件 处于18号版本的样子
		(以上3个新生成的辅助文件如果理解了，就要将其delete删除，否则源文件禁止提交)

	(3)给融合代码文件做适当调整
	(4)再次提交文件给svn仓库

2.11.账号权限：
		在svn服务应用过程中，如果想要清楚地知道文件的每行代码都是哪个用户开发维护的，
		就需要给svn服务设置账号和权限，同时这样还会使得svn服务可以非常安全地运行
	①：关闭之前开启的匿名权限（设置/home/svndata/shop/conf/svnserve.conf 中的anon-access = none）	
	②：当前仓库的主配置文件(svnserve.conf)引入辅助配置文件，将以下两项注释去掉
		password-db = passwd
		authz-db = authz
		(1)	authz: 			用户权限 	辅助配置文件
		(2)	passwd: 		用户名和密码 辅助配置文件
		(3)	svnserve.conf: 	当前仓库的主配置文件
	③：设置账号
		在passwd文件末尾加入如下用户，并且设置密码（自定义）
			user1 = 123456
			user2 = 123456
			user3 = 123456
	④：权限设置
			r:read读，就是update更新仓库文件到本地
			w:write 写，就是commit提交文件到仓库，该操作要求同时设置r读的权限
		(4.1)单个用户设置：
		在authz文件最末尾给仓库帐号进行权限设置：
		[shop:/]
		user1=rw
		user2=rw
		user3=r
		*=  
		最后一行*=意思是除了上述用户，其他用户都没有操作权力，一般在所有用户的最后设置一个“*=”是一种权限分配的好习惯，避免权限外溢		
		(4.2.1)组别权限设置，可以将多个用户归纳到一个组，对组进行权限设置
			在authz文件中设置如下第四行：
			[groups]
			# harry_and_sally = harry,sally
			# harry_sally_and_joe = harry,sally,&joe
			group001 = user1,user2,user3
		(4.2.2)在authz文件最末尾如下设置，表示该组人员同时具有读写的权限。
		@group001 = rw

2.12.清除缓存
	windows：具体这样“右键-->SVN-->Settings-->Saved Data”删除对应的缓存即可：
	linux:删除~/.subversion/auth目录即可

2.13.钩子，在实际工作中
	多个程序开发人员在本地工作目录做代码文件的开发，完毕后要把文件commit提交给SVN仓库(该仓库只存储代码，不负责运行)
	在网站运行目录要使用update指令，把最新提交给SVN仓库的文件更新同步到网站目录，以便使其可以被访问运行，这时就完成了一个代码文件从开发到部署的完整步骤

	(2.13.1)Nginx服务网站运行目录(Linux系统)要与SVN仓库取得联系
	例如：
	># svn co svn://169.254.123.200/php68 /data/wwwroot/svnshop
	># svn co svn://47.92.160.93/xietong_danji2020 /data/wwwroot/xietong_danji2020
	># svn co svn://127.0.0.1/php68 /data/wwwroot/svnshop
	(如果svn服务就在当前操作系统内部，那么可以使用127.0.0.1代表主机ip地址)
	（2.13.2）设置钩子：
		在SVN仓库和网站目录之间有一个钩子，当客户端有文件被commit提交到SVN仓库后，不需要运维人员手动执行update更新操作，
		该文件会被钩子自动同步给网站运行目录，这样做就由原先的commit+update两部步骤，变为只执行commit一个步骤，
		见这样操作可以显著地提高了项目的开发部署速度。
		文件被从 SVN仓库 自动更新到 网站运行目录 的过程就称为“钩子Hook”

		①：在/home/svndata/shop/hooks目录下复制文件post-commit.tmpl并改名字为post-commit（(带.tmpl说明是模版文件，只有去除.tmpl才会起作用）
		②：chmod 755 post-commit 让该文件具有可执行权限
		③：注释掉最后一行
			#mailer.py commit "$REPOS" "$REV" /path/to/mailer.conf
		④：在文件最后加入：
			svn update --username user1(svn用户名) --password(svn用户密码) 123456 /data/wwwroot/svnshop(网站目录)
			svn update --username user1 --password 123456 /data/wwwroot/xietong_danji2020
			由上命令可知钩子的本质也是执行update指令而已，不同的是钩子是系统自动触发调用而已
		⑤：执行./post-commit可查看版本信息	

3.文件版本相关
	3.1.可以查看文件版本，进行版本比较，版本切换等操作
	3.2.仓库文件删除
	在本地工作目录对某个文件删除后，该文件在svn仓库中还是存在的，执行update操作会同步更新出来，
	如果确定文件不需要了可以通过commit提交动作把仓库对应的文件也给删除
