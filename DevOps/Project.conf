
nginx/php-cron/xxl-job-executor 这三个容器需要开启ssh服务
root密码:123456
************************************************************************************************************************
portainer容器:

本地端口(宿主机端口):容器端口
本地目录(宿主机目录):容器目录

docker run -d \
-p 9000:9000 \
--restart=always \
-v /var/run/docker.sock:/var/run/docker.sock \
--name portainer \
--privileged=true \
portainer/portainer-ce:2.19.1

docker pull portainer/portainer-ce:2.19.1

admin
admin5201314
************************************************************************************************************************
mysql容器

docker run -itd \
-p 33060:3306 \
--privileged=true \
-v /Users/wang/web_docker/mysql/web_mysql/log:/var/log/mysql \
-v /Users/wang/web_docker/mysql/web_mysql/data:/var/lib/mysql \
-v /Users/wang/web_docker/mysql/web_mysql/conf.d/:/etc/mysql/conf.d \
-e MYSQL_ROOT_PASSWORD=root \
--name web_mysql \
mysql:latest

mysql8,新建一个用户(不要直接用root账户),修改验证方式用作容器访问(https://blog.csdn.net/firstcode666/article/details/121051498)
CREATE USER 'mysql_docker'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';
ALTER USER 'mysql_docker'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';
grant all  on *.*  to "mysql_docker"@"%";

SELECT host,user from user
update `user` set host='%' where host='localhost' and user='mysql_docker'

------------------------------------------------------------
prom/mysqld-exporter:(监控类型-不建议使用容器)

docker run -d -p 9104:9104 --link=web_mysql:web_mysql  \
-v /Users/wang/web_docker/k8s/mysqld_exporter:/root
--name=web_mysqld_exporter \
-e DATA_SOURCE_NAME="mysql_docker:root@(web_mysql:3306)/database" prom/mysqld-exporter
#--config.my-cnf="/root/my.cof" prom/mysqld-exporter

************************************************************************************************************************
redis:

docker run -itd \
-p 7379:6379 \
--privileged=true \
-v /Users/wang/web_docker/redis/web_redis/conf:/usr/local/etc/redis \
-v /Users/wang/web_docker/redis/web_redis/data:/data \
--name web_redis \
redis:7.0 redis-server /usr/local/etc/redis/redis.conf

************************************************************************************************************************
mariadb容器

docker run -itd \
-p 38080:3306 \
--name mariadb \
-e MARIADB_ROOT_PASSWORD=root \
-v /Users/wang/web_docker/mariadb/datadir:/var/lib/mysql
mariadb:10.2.44

************************************************************************************************************************
mongodb容器

docker run -d  --name web_mongo \
	-p 27017:27017 \
	-e MONGO_INITDB_ROOT_USERNAME=mongoadmin \
	-e MONGO_INITDB_ROOT_PASSWORD=secret \
mongo

************************************************************************************************************************
************************************************************************************************************************
此方法先运行容器,代码更新通过拷贝,容器一直运行
PHP容器
(--link 参数参考https://www.jb51.net/article/264021.htm)
docker run -d --name web_php -v /Users/wang/web_docker/html:/var/www/html 	devilbox/php-fpm:7.2-prod

***********************************

启动nginx容器(root密码:123456)
web_php(源容器名称):web_php(源容器在目标容器中的别名)
docker run -d -p 18880:18880 --link web_php:web_php -v /Users/wang/web_docker/html:/usr/share/nginx/html --name web_nginx nginx:latest

************************************************************************************************************************
************************************************************************************************************************
此方法nginx容器一直存在,项目容器会在发版时重构
api和cron使用同一镜像,queue单独使用一镜像,三者区别主要是dcokerfile构建镜像时是否需要拷贝队列文件(基础镜像一样)

mrwang_nginx:

docker start b0a6300ea761d224742bc1403bd971d02685b17d039f9e7017d725a99e592087

docker run -itd \
-p 18886:18886 \
--privileged=true \
-v /Users/wang/web_docker/docker/html/conf.d:/etc/nginx/conf.d \
-v /Users/wang/web_docker/docker/html/web_mrwang_docker:/usr/share/nginx/html/web_mrwang_docker \
--name mrwang_nginx \
registry.cn-hangzhou.aliyuncs.com/u_ta/nginx_for_k8s:1.0

***********************************
mrwang_api:

docker start 688066a9d5f30d685dfc513b864f28f30c8c5729a71357ab1d24bbbaa019ee37

docker run -itd \
--privileged=true \
--platform linux/amd64 \
--name mrwang_api \
-v /Users/wang/web_docker/docker/html/web_mrwang_docker:/var/www/html/web_mrwang_docker \
mrwang_api_cron:latest

***********************************
mrwang_cron

docker start 947c12587e1d0cd5c227bbf0c46fa34f27ee34c1d3c757ba56830b44c6324966

docker run -itd \
--privileged=true \
--platform linux/amd64 \
--name mrwang_cron \
-v /Users/wang/web_docker/docker/html/web_mrwang_docker:/var/www/html/web_mrwang_docker \
mrwang_api_cron:latest

***********************************
mrwang_queue

docker start 47a2ffe697524971d4f15ac7221a3bea362e2787b65e73c4f9e16a97354e0095

docker run -itd \
--privileged=true \
--platform linux/amd64 \
--name mrwang_queue \
-v /Users/wang/web_docker/docker/html/web_mrwang_docker:/var/www/html/web_mrwang_docker \
mrwang_queue:latest

************************************************************************************************************************
nginx_for_docker:

server {
    listen       18880;
    listen  [::]:18880;
    server_name  localhost;
    #nginx 容器项目路径
    root   /usr/share/nginx/html/web_mrwang/public;

    location / {
        index  index.html index.htm index.php;
        #注意：这里的rewrite和本地的有所区别
        if (!-e $request_filename) {
           rewrite ^(.*)$ /index.php;
        }
    }

    location ~ \.php$ {
        fastcgi_pass   web_php:9000;
        fastcgi_index  index.php;
        #php项目所在PHP容器的路径
        fastcgi_param  SCRIPT_FILENAME  /var/www/html/web_mrwang/public$fastcgi_script_name;
        include        fastcgi_params;
    }

}

************************************************************************************************************************
nginx_for_k8s:

server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    root   /etc/nginx/html/web_mrwang_k8s/public;
    location / {
        index  index.html index.htm index.php;
        #注意：这里的rewrite和本地的有所区别
        if (!-e $request_filename) {
           rewrite ^(.*)$ /index.php;
        }
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    location ~ \.php$ {
        #节点IP:php-service对外暴露端口号
        fastcgi_pass   192.168.65.4:31091;
        fastcgi_index  index.php;
        #php项目所在PHP容器的路径
        fastcgi_param  SCRIPT_FILENAME  /var/www/html/web_mrwang_k8s/public$fastcgi_script_name;
        include        fastcgi_params;
    }
}
************************************************************************************************************************
