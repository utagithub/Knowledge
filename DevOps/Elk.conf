
filebeat.yml和logstash配置文件中的端口不要使用默认的5044(该端口默认已经被占用)
****************************************************************************************************************************************************************
es启动

docker run -itd \
--privileged=true \
--name elk_es \
-p 9200:9200 \
-p 9300:9300 \
-e "ES_JAVA_OPTS=-Xms512m -Xmx512m" \
-e "discovery.type=single-node" \
-v /Users/wang/web_docker/elk/es/data:/usr/share/elasticsearch/data \
elasticsearch:7.17.7




es容器启动失败解决:
https://mp.weixin.qq.com/s/Cr5Pwag_FRRntmFugwhpAg
https://blog.csdn.net/qq_43470725/article/details/120215434

内存占用高解决:
https://www.yingsoo.com/news/servers/49073.html
查看进程使用内存
cat /proc/进程号/status|grep VmRSS

docker cp /Users/wang/web_docker/docker-compose-yml/elasticsearch.yml 	04b47d5f7001c33d0f5db57031120e4126cdce043833e6838821f82b50a165f4:/usr/share/elasticsearch/config/elasticsearch.yml
****************************************************************************************************************************************************************
kibana启动

docker run -id \
--privileged=true \
--name elk_kibana \
-p 5601:5601 \
-v /Users/wang/web_docker/elk/kibana/data \
kibana:7.17.7


docker cp /Users/wang/web_docker/docker-compose-yml/kibana.yml 		ba268cbcc7ce9f8071edcb52a448ca6832d4073b5ceec330305f1aea967a3da6:/usr/share/kibana/config/kibana.yml
****************************************************************************************************************************************************************

logstash容器

docker run -id \
--privileged=true \
--name elk_logstash \
logstash:7.17.7
#-v /Users/wang/web_docker/elk/logstash/data:/usr/share/logstash/data \

数据路径
path.data: /usr/share/logstash/data
搜集配置文件路径
path.config: /usr/share/logstash/pipeline
logstash.yml所在路径
path.setings: /usr/share/logstash/config


启动服务实例:
nohup logstash -f /var/logstash_conf/mrwang.conf >/dev/null 2>&1 &

标准输入输出测试:(错误参考)
logstash  -e 'input { stdin{} } output { stdout{} }'


docker cp /Users/wang/web_docker/docker-compose-yml/logstash.yml 4fc7e70cf6cd06cf9643bf332730484e334cd72ecb1503035378137503dda163:/usr/share/logstash/config/logstash.yml
****************************************************************************************************************************************************************
filebeat(在nginx容器中)
nohup filebeat -e -c /etc/filebeat/filebeat.yml >/dev/null 2>&1 &
#nohup filebeat -e -c /etc/filebeat/filebeat.yml >/var/log/filebeat/filebeat.log 2>&1 &

grep -Ev '#|^$' /etc/filebeat/filebeat.yml

设置登录自启:
if echo "$-" | /etc/init.d/ssh start > /dev/zero | (nohup filebeat -e -c /etc/filebeat/filebeat.yml >/dev/null 2>&1 &); then
  echo 123 > /dev/zero;
fi

if echo "$-" | /etc/init.d/ssh start > /dev/zero; then
  echo 123 > /dev/zero;
fi

****************************************************************************************************************************************************************

curl -u elastic:changeme -XDELETE localhost:9200/_xpack/security/privilege/kibana-.kibana/space_all
curl -u elastic:changeme -XDELETE localhost:9200/_xpack/security/privilege/kibana-.kibana/space_read

注意,第一次建立索引后，如果删除该索引，后续再次创建索引不会成功，必须得出发新的日志写入才行


PID=$(ps -ef | grep ssh | grep -v grep | awk '{ print $2 }')
if [ -z "$PID" ]
then
service ssh start
else
echo ssh is running
fi



>/dev/null  2>&1 的含义：
将标准输出和错误输出全部重定向到/dev/null中,也就是将产生的所有信息丢弃。
详细分析下:
符号 >   等价于 1> (系统默认为1,省略了先); 所以">/dev/null"等同于 "1>/dev/null"
/dev/null  表示空设备文件
0 表示stdin标准输入
1 表示stdout标准输出
2 表示stderr标准错误
& 表示等同于的意思，2>&1，表示2的输出重定向等同于1
因此，>/dev/null 2>&1 也可以写成“1> /dev/null 2> &1”

>/dev/null 2>&1 命令执行过程为：
1>/dev/null ：首先表示标准输出重定向到空设备文件，也就是不输出任何信息到终端，说白了就是不显示任何信息。
2>&1 ：接着，将标准错误输出重定向 到 标准输出，因为之前标准输出已经重定向到了空设备文件，所以标准错误输出也重定向到空设备文件。
