<?php
//php算法练习
$arr = [
    1,
    4,
    22,
    99,
    -105,
    7,
    456,
    0,
    100,
    -99,
    2019
];
//1.1-冒泡排序
/*假设数组有n个元素，实现数组元素的升序：
需要执行的趟数为n-1 （从0开始计数， 则总趟数< n-1）趟。
每趟中，相邻元素进行两两比较。左侧元素（索引较小）大于右侧元素（索引较大）时，
两者交换位置。使用当前的较大元素（之前所有已比较元素中最大的），与下一个相邻元素继续比较…….一趟完成，
将一个最大元素放在正确位置，后续无需考虑该最大值元素。

每趟中，需要比较的元素都会不断的减少。
重复以上的步骤，将所有的元素位置摆正*/
function bubble_sort($arr)
{
    for ($i = 0, $len = count($arr); $i < $len - 1; $i++) {
        for ($j = 0; $j < $len - 1 - $i; $j++) {
            if ($arr[$j] > $arr[$j + 1]) {
                $tmp = $arr[$j];
                $arr[$j] = $arr[$j + 1];
                $arr[$j + 1] = $tmp;
            }
        }
    }
    return $arr;
}
echo "<pre>";
echo "1.1-冒泡排序结果如下：" . PHP_EOL;
print_r(bubble_sort($arr));
echo PHP_EOL . "----------------------------------------------------------------------" . PHP_EOL;


//1.2-快速排序
/*从数列中挑出一个元素，称为 “基准”（pivot），
重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。
在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。
递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。*/
function quick_sort($arr)
{
    $arr_length = count($arr);
    if ($arr_length <= 1) {
        return $arr;
    }

    $base = $arr[0];
    $left_arr = [];
    $right_arr = [];
    for ($i = 1; $i < $arr_length; $i++) {
        if ($arr[$i] <= $base) {
            $left_arr[] = $arr[$i];
        } else {
            $right_arr[] = $arr[$i];
        }
    }
    $left_arr = quick_sort($left_arr);
    $right_arr = quick_sort($right_arr);
    return array_merge($left_arr, [$base], $right_arr);
}
echo "1.2-快速排序结果如下：" . PHP_EOL;
print_r(quick_sort($arr));
echo PHP_EOL . "----------------------------------------------------------------------" . PHP_EOL;


//2.选择排序
/*①	逐个假设数组的最左侧的一个元素为最小值，
②	使用假设的最小值元素 与 剩下的各个元素逐个比较： 找到更小值，则记录对应元素下标。后续比较时，必须使用当前找到的最小值进行比较。
③	本趟比较完成，将 假设的最小值，与找到的真正最小值元素交换位置
④	每趟比较，确定一个元素的位置。循环多趟所有元素的位置确定。

升序）假设左侧元素为最小值元素，与右侧元素逐一进行比较。
	如果找到较小的元素，记录当前元素的下标。
	并使用当前元素（较小），作为最小值，与剩下的元素比较，查找更小的元素。
	每趟比较完成，都可以确定一个真正的最小值元素，并放在左侧*/
function select_sort($arr)
{
    for ($i = 0, $len = count($arr); $i < $len - 1; $i++) {
        $index = $i;
        for ($j = $i + 1; $j <= $len - 1; $j++) {
            if ($arr[$index] > $arr[$j]) {
                $index = $j;
            }
        }
        if ($index != $i) {
            $tmp = $arr[$i];
            $arr[$i] = $arr[$index];
            $arr[$index] = $tmp;
        }
    }
    return $arr;
}
echo "2.选择排序结果如下：" . PHP_EOL;
print_r(select_sort($arr));
echo PHP_EOL . "----------------------------------------------------------------------" . PHP_EOL;


//3.插入排序
/*
从第一个元素开始，该元素可以认为已经被排序
取出下一个元素，在已经排序的元素序列中从后向前扫描
如果该元素（已排序）大于新元素，将该元素移到下一位置
重复步骤3，直到找到已排序的元素小于或者等于新元素的位置
将新元素插入到该位置中
重复步骤2
*/
function insert_sort($arr)
{
    /*
    区分 哪部分是已经排序好的
    哪部分是没有排序的
    找到其中一个需要排序的元素
    这个元素 就是从第二个元素开始，到最后一个元素都是这个需要排序的元素
    利用循环就可以标志出来
    i循环控制 每次需要插入的元素，一旦需要插入的元素控制好了，
    间接已经将数组分成了2部分，下标小于当前的（左边的），是排序好的序列
    */
    for ($i = 1, $len = count($arr); $i < $len; $i++) {
        $tmp = $arr[$i];
        for ($j = $i - 1; $j >= 0; $j--) {
            if ($tmp < $arr[$j]) {
                $arr[$j + 1] = $arr[$j];
                $arr[$j] = $tmp;
            } else {
                break;
            }
        }
    }
    return $arr;
}
echo "3.插入排序结果如下：" . PHP_EOL;
print_r(insert_sort($arr));
echo PHP_EOL . "----------------------------------------------------------------------" . PHP_EOL;

递归算斐波那契数列：0,1,1,2,3,5,8,13……
递归算法:
function Fibonacci_digui($number){
    if ($number == 0)
        return 0;
    else if ($number == 1)
        return 1;
    else
        return (Fibonacci_digui($number-1) + Fibonacci_digui($number-2));
}

$number = 10;
for ($counter = 0; $counter < $number; $counter++){
    echo Fibonacci_digui($counter),' ';
}


迭代算法:
首先，我们将第一个和第二个数字初始化为0和1.然后，我们打印第一个和第二个数字。然后我们将流程发送到迭代while循环
，我们通过添加前两个数字得到下一个数字，同时我们将第一个数字与第二个数字交换，第二个数字与第三个数字交换

function Fibonacci_diedai($n){
    $num1 = 0;
    $num2 = 1;
    $counter = 0;
    while ($counter < $n){
        echo ' '.$num1;
        $num3 = $num2 + $num1;
        $num1 = $num2;
        $num2 = $num3;
        $counter++;
    }
}
$n = 10;
Fibonacci_diedai($n);
echo PHP_EOL . "----------------------------------------------------------------------" . PHP_EOL;
二分查找：
function binarySearch($array, $findVal)
{
  // 非数组或者数组为空，直接返回-1
  if (!is_array($array) || empty($array)) {
    return -1;
  }
  if(count($array) <=1 ) return $array;
  // 查找区间，起点和终点
  $start = 0;
  $end = count($array) - 1;
  while ($start <= $end) {
    // 以中间点作为参照点比较，取整数
    $middle = intval(($start + $end) / 2);

    if ($array[$middle] > $findVal) {
      // 查找数比参照点小，则要查找的数在左半边
      // 因为 $middle 已经比较过了，这里需要减1
      $end = $middle - 1;

    } elseif ($array[$middle] < $findVal) {
      // 查找数比参照点大，则要查找的数在右半边
      // 因为 $middle 已经比较过了，这里需要加1
      $start = $middle + 1;

    } else {
      // 查找数与参照点相等，则找到返回
      return $middle;
    }
  }
  // 未找到，返回-1
  return -1;
}

// 调用
$array = [10,12,16,19,20,34,56,78,84,95,100];
echo binarySearch($array, 84);
exit();
echo PHP_EOL . "----------------------------------------------------------------------" . PHP_EOL;
