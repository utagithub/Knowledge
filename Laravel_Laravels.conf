<?php

安装配置 LaravelS
在 Laravel 应用中使用 Swoole 之前，先通过 Composer 安装 LaravelS 扩展包：

1.
composer require hhxsv5/laravel-s
该扩展包具备自动发现功能（Laravel 5.5 以上版本可用），无需手动在 config/app.php 配置文件中注册，安装完成后，运行如下 Artisan 命令相应脚本和配置文件发布到根目录下：

2.
php artisan laravels publish
该命令会发布配置文件 laravels.php 到 config 目录下，以及脚本文件到 bin 目录下：


3.
你可以在配置文件中对 Swoole 进行一些基本配置，而脚本文件主要用于管理 Swoole 服务的启动、重载、关闭等操作。

启动 LaravelS
完成上述操作后，就可以通过 php bin/laravels start 命令启动 LaravelS 了：

参考网址：https://xueyuanjun.com/post/9801.html

nginx站点配置示例：
upstream laravels{
	//laravels 服务启动默认监听5200端口
    server 127.0.0.1:5200 weight=5 max_fails=3 fail_timeout=30s;
    keepalive 16;
}


Swoole-Http服务：
server {
    listen 8082;
    server_name 127.0.0.1;
    root /data/wwwroot/larswoole/public/;
    index index.php index.html index.htm;

    # Nginx 处理静态资源，LaravelS 处理动态资源
    location / {
        try_files $uri @laravels;
    }

    location @laravels {
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Real-PORT $remote_port;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header Scheme $scheme;
        proxy_set_header Server-Protocol $server_protocol;
        proxy_set_header Server-Name $server_name;
        proxy_set_header Server-Addr $server_addr;
        proxy_set_header Server-Port $server_port;
        proxy_pass http://laravels;
    }
}

在 Nginx 中配置支持 Swoole-WebSocket 通信
接下来我们要到 Nginx 对应的虚拟主机配置中使其支持处理 WebSocket 连接和请求，
由于 Swoole 的 WebSocket 服务器基于 Swoole HTTP 服务器实现，所以我们要同时开启这两个支持，
示例如下：
upstream danmu {
    # Connect IP:Port
    server 127.0.0.1:5200 weight=5 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

server {
    listen 8083;

    server_name 127.0.1;
    root /data/wwwroot/larswoole/public/;

    #error_log /var/log/nginx/laravel58_error.log;
    #access_log /var/log/nginx/laravel58_access.log;

    autoindex off;
    index index.html index.htm;

    # Nginx handles the static resources(recommend enabling gzip), LaravelS handles the dynamic resource.
    location / {
        try_files $uri @danmu;
    }

    # Response 404 directly when request the PHP file, to avoid exposing public/*.php
    #location ~* \.php$ {
    #    return 404;
    #}

    # Http and WebSocket are concomitant, Nginx identifies them by "location"
    # !!! The location of WebSocket is "/ws"
    # Javascript: var ws = new WebSocket("ws://laravel58.test/ws");
    # 处理 WebSocket 通信
    location ^~ /ws/ {
        # proxy_connect_timeout 60s;
        # proxy_send_timeout 60s;
        # proxy_read_timeout: Nginx will close the connection if the proxied server does not send data to Nginx in 60 seconds; At the same time, this close behavior is also affected by heartbeat setting of Swoole.
        # proxy_read_timeout 60s;
        proxy_http_version 1.1;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Real-PORT $remote_port;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header Scheme $scheme;
        proxy_set_header Server-Protocol $server_protocol;
        proxy_set_header Server-Name $server_name;
        proxy_set_header Server-Addr $server_addr;
        proxy_set_header Server-Port $server_port;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_pass http://danmu;
    }

    location @danmu {
        # proxy_connect_timeout 60s;
        # proxy_send_timeout 60s;
        # proxy_read_timeout 60s;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Real-PORT $remote_port;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header Scheme $scheme;
        proxy_set_header Server-Protocol $server_protocol;
        proxy_set_header Server-Name $server_name;
        proxy_set_header Server-Addr $server_addr;
        proxy_set_header Server-Port $server_port;
        proxy_pass http://danmu;
    }
}